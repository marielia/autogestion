<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 31-mar-2008 10:39:34 by Hibernate Tools 3.2.0.beta7 -->
<hibernate-mapping>
    <class name="com.refinor.extranet.data.Mpedidos" table="MPedidos" schema="dbo" >
        <composite-id name="id" class="com.refinor.extranet.data.MpedidosId">
            <key-property name="codigo" type="int">
                <column name="Codigo" />
            </key-property>
            <key-property name="nroSucursal" type="int">
                <column name="nroSucursal" />
            </key-property>
        </composite-id>
        <property name="cliente" type="java.lang.Integer">
            <column name="Cliente" />
        </property>
        <property name="fecha" type="timestamp">
            <column name="Fecha" length="16" />
        </property>
        <property name="fevto" type="timestamp">
            <column name="Fevto" length="16" />
        </property>
        <property name="arrivo" type="long">
            <column name="Arrivo" precision="10" scale="0" not-null="true" />
        </property>
        <property name="bultos1" type="java.lang.Integer">
            <column name="Bultos1" />
        </property>
        <property name="bultos2" type="java.lang.Integer">
            <column name="Bultos2" />
        </property>
        <property name="msg1" type="string">
            <column name="Msg1" length="250" />
        </property>
        <property name="msg2" type="string">
            <column name="Msg2" length="250" />
        </property>
        <property name="codRemito" type="java.lang.Integer">
            <column name="CodRemito" />
        </property>
        <property name="idUserLock" type="java.lang.Integer">
            <column name="IdUserLock" />
        </property>
        <property name="fhBaja" type="timestamp">
            <column name="FhBaja" length="16" />
        </property>
        <property name="nroExtPedido" type="string">
            <column name="NroExtPedido" length="12" />
        </property>
        <property name="nroAuto" type="java.lang.Integer">
            <column name="nro_auto" />
        </property>
        <property name="nroLiquidacionRefipass" type="java.lang.Long">
            <column name="NroLiquidacionRefipass" precision="18" scale="0" />
        </property>
        <property name="estadoLiquidacionRefipass" type="java.lang.Integer">
            <column name="EstadoLiquidacionRefipass" />
        </property>
        <property name="fechaLiquidacionRefipass" type="timestamp">
            <column name="FechaLiquidacionRefipass" length="23" />
        </property>
        <property name="ivaBasico" type="big_decimal">
            <column name="IvaBasico" scale="4" />
        </property>
        <property name="ivaAdicional" type="big_decimal">
            <column name="IvaAdicional" scale="4" />
        </property>
        <property name="impuestoGr1" type="big_decimal">
            <column name="impuestoGr1" scale="4" />
        </property>
        <property name="impuestoGr2" type="big_decimal">
            <column name="impuestoGr2" scale="4" />
        </property>
        <property name="impuestoGr3" type="big_decimal">
            <column name="impuestoGr3" scale="4" />
        </property>
        <property name="iibb" type="big_decimal">
            <column name="iibb" scale="4" />
        </property>
        <property name="piva" type="big_decimal">
            <column name="piva" scale="4" />
        </property>
        <property name="impuestoGr4" type="big_decimal">
            <column name="impuestoGr4" scale="4" />
        </property>
    </class>
    
        <sql-query name="findRemitosByClientePatenteFamilia">    
    	<query-param name="patente" type="string"/>
		<query-param name="codClienteInt" type="integer"/>
		<query-param name="codProducto" type="integer"/>
		<query-param name="mes" type="integer"/>
		<query-param name="anio" type="integer"/>
		
		
    <![CDATA[    	
    	
    	
		select 
		p.Fecha as Fecha,
		p.nroSucursal as Pref,
		p.CodRemito  as NroRemito,
		m.codArticulo as codProdcuto, 
		m.descripcion as descProducto,
		
		m.precioCImp as precioKilo,
		isnull(m.precioKilo * m.bultos1,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0)+ isnull(p.iibb,0)+ isnull(p.piva,0) as  total$,		
		
		m.bultos1 as Litros,
		dt.patente as patente,
		isnull(ch.codigo,0) as codCho,
		ch.apellido as apellidoChofer,
		ch.nombre as nombreChofer,
		c.cod_cliente_alfa as codclia
		
		from mpedidos p inner join   MClientes c
		on p.Cliente = c.Codigo inner join MpedidosLinea m
		on m.codPedido = p.codigo and	m.sucursal = p.nroSucursal inner join mpedidosDTCarga dt
		on dt.codigo_MP = p.codigo   and dt.sucursal = p.nroSucursal left join mchofer ch
		on dt.dni = ch.dni and ch.cod_cli = c.codigo 

		where 
		c.codigo = :codClienteInt and 		
        dt.cod_vehiculo like :patente and
		(m.codArticulo in (select art.codigo from marticulos art where art.especie = :codProducto )) and
		(MONTH(p.fecha) = :mes or :mes = -1) and
		(YEAR(p.fecha) = :anio or :anio = -1)
		 order by p.Fecha
			
    ]]>  
    
    </sql-query>				  
    <sql-query name="findRemitosByClientePatenteGrupo">    
    	<query-param name="patente" type="string"/>
		<query-param name="codClienteInt" type="integer"/>
		<query-param name="codProducto" type="integer"/>
		<query-param name="mes" type="integer"/>
		<query-param name="anio" type="integer"/>
		
		
    <![CDATA[    	
    	
    	
		select 
		p.Fecha as Fecha,
		p.nroSucursal as Pref,
		p.CodRemito  as NroRemito,
		m.codArticulo as codProdcuto, 
		m.descripcion as descProducto,
		
		m.precioCImp as precioKilo,
		isnull(m.precioKilo * m.bultos1,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0)+ isnull(p.iibb,0)+ isnull(p.piva,0) as  total$,		
		
		m.bultos1 as Litros,
		dt.patente as patente,
		isnull(ch.codigo,0) as codCho,
		ch.apellido as apellidoChofer,
		ch.nombre as nombreChofer,
		c.cod_cliente_alfa as codclia
		
		from mpedidos p inner join   MClientes c
		on p.Cliente = c.Codigo inner join MpedidosLinea m
		on m.codPedido = p.codigo and	m.sucursal = p.nroSucursal inner join mpedidosDTCarga dt
		on dt.codigo_MP = p.codigo   and dt.sucursal = p.nroSucursal left join mchofer ch
		on dt.dni = ch.dni and ch.cod_cli = c.codigo 

		where 
		c.codigo = :codClienteInt and 		
        dt.cod_vehiculo like :patente and
		(m.codArticulo in (select art.codigo from marticulos art where art.variedad = :codProducto ) ) and
		(MONTH(p.fecha) = :mes or :mes = -1) and
		(YEAR(p.fecha) = :anio or :anio = -1)
		 order by p.Fecha
			
    ]]>  
    
    </sql-query>
    
     <sql-query name="findRemitosByClientePatente">    
    	<query-param name="patente" type="string"/>
		<query-param name="codClienteInt" type="integer"/>
		<query-param name="codProducto" type="integer"/>
		<query-param name="mes" type="integer"/>
		<query-param name="anio" type="integer"/>
		
		
    <![CDATA[
    	
		select 
		p.Fecha as Fecha,
		p.nroSucursal as Pref,
		p.CodRemito  as NroRemito,
		m.codArticulo as codProdcuto, 
		m.descripcion as descProducto,
		
		m.precioCImp as precioKilo,
		isnull(m.precioKilo * m.bultos1,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0)+ isnull(p.iibb,0)+ isnull(p.piva,0) as  total$,		
		
		m.bultos1 as Litros,
		dt.patente as patente,
		isnull(ch.codigo,0) as codCho,
		ch.apellido as apellidoChofer,
		ch.nombre as nombreChofer,
		c.cod_cliente_alfa as codclia
		
		from mpedidos p inner join   MClientes c
		on p.Cliente = c.Codigo inner join MpedidosLinea m
		on m.codPedido = p.codigo and	m.sucursal = p.nroSucursal inner join mpedidosDTCarga dt
		on dt.codigo_MP = p.codigo   and dt.sucursal = p.nroSucursal left join mchofer ch
		on dt.dni = ch.dni and ch.cod_cli = c.codigo 

		where 
		c.codigo = :codClienteInt and 		
        dt.cod_vehiculo like :patente and
		(m.codArticulo = :codProducto or :codProducto =0 ) and
		(MONTH(p.fecha) = :mes or :mes = -1) and
		(YEAR(p.fecha) = :anio or :anio = -1)
		 order by p.Fecha
			
    ]]>  
    
    </sql-query>
    
    <sql-query name="obtenerSumaConsumoPorClientePatente">    
    	<query-param name="patente" type="string"/>
		<query-param name="codClienteInt" type="integer"/>
		<query-param name="codProducto" type="integer"/>
		
		
		
    <![CDATA[
		
		select 
		dt.patente as patente,
		c.codigo as codigo,
		m.codArticulo as codProducto, 
		isnull(sum(m.bultos1),0)
				
		from mpedidos p inner join   MClientes c
		on p.Cliente = c.Codigo inner join MpedidosLinea m
		on m.codPedido = p.codigo and	m.sucursal = p.nroSucursal inner join mpedidosDTCarga dt
		on dt.codigo_MP = p.codigo   and dt.sucursal = p.nroSucursal left join mchofer ch
		on dt.dni = ch.dni and ch.cod_cli = c.codigo 

		where 
		c.codigo= :codClienteInt and 
		
		(p.codRemito in (select nroRemito 
				   from MFacturasV 
				   where 
				   nroRemito is not null and 
				   nroRemito <> 0
				   and nrosucursal = p.nroSucursal)

		or p.codRemito in (select nroRemito 
					from MRemitoFactura
					where  nroRemito =  p.codRemito
	 		           	and  suc_rto =  p.nroSucursal)
		) and  dt.patente like :patente and
		(m.codArticulo = :codProducto or :codProducto = -1)

		group by dt.patente,c.codigo,m.codArticulo 
		 	
    ]]>  
    
    </sql-query>
    
    <sql-query name="findConsumosVehiculos">
	    <query-param name="codCliente" type="string"/>
	    <query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>    
    	<query-param name="patente" type="string"/>		
		<query-param name="descripcionUnidadNegocio" type="string"/>
		<query-param name="descripcionGrupoUN" type="string"/>	
		<query-param name="codUnidadNegocio" type="integer"/>
		<query-param name="codGrupoUN" type="integer"/>
		
		select 
	
		c.patente as patente,
		u.codigo as codUnidadN,
		u.descripcion as descUnidadN,
		g.codigo as codGrupoUN,
		g.descripcion as descGrupoUN,
		sum(l.bultos1)as cantidadLitros,
		
		sum(isnull(l.bultos1 * l.precioKilo,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0) + isnull(p.impuestoGr4,0)+ isnull(p.iibb,0)+ isnull(p.piva,0)) as  total$,
				
		l.codArticulo as codProducto,
		l.descripcion as producto,
		p.cliente as codCliente,
		cl.descripcion as descrCli
		
		from mpedidos p, MpedidosLinea l, mpedidosdtcarga c, MunidadN u,
		mClientes cl, MgrupoUn g
		where
		(p.fecha between  :fechaDesde and :fechaHasta) and
		(l.sucursal = p.nroSucursal and
		l.codPedido = p.codigo) and
		(c.sucursal = p.nroSucursal and
		c.codigo_MP = p.codigo and c.patente like :patente) and
		(c.unidad_neg_veh = u.codigo and
		u.descripcion like :descripcionUnidadNegocio and
		u.codGrupoUn = g.codigo and
		g.descripcion like :descripcionGrupoUN) and
		(cl.codigo = p.cliente and
		cl.cod_cliente_alfa like :codCliente ) 	and
		(g.codigo = :codGrupoUN or :codGrupoUN = -1) and 
		(u.codigo = :codUnidadNegocio or :codUnidadNegocio = -1)	
		group by c.patente,u.codigo,u.descripcion,g.codigo,g.descripcion,l.codArticulo, l.descripcion,p.cliente,cl.descripcion
		order by c.patente			
    
    </sql-query>
    
    
    <sql-query name="findRemitosByClientePatenteProductoFechas">    
    	<query-param name="patente" type="string"/>
		<query-param name="codClienteInt" type="integer"/>
		<query-param name="codProducto" type="integer"/>
		<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
     	<query-param name="codUnidadNegocio" type="integer"/> 
      	<query-param name="codGrupoUN" type="integer"/> 
   <![CDATA[
    	
		select 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		l.bultos1 as cantidadLitros,
				
		isnull(l.bultos1 * l.precioKilo,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0) + isnull(p.iibb,0)+ isnull(p.piva,0) as  total$,
	
		
		c.patente as patente, 
		ch.apellido as apellido,
		ch.nombre as nombre,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		uV.descripcion as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		gV.descripcion as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		uC.descripcion as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		gC.descripcion as descGrupoUNChofer,
		cs.desc_ccss
		
		from mpedidos p inner join MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente left join Mchofer ch
		on ch.dni = c.dni and ch.cod_cli = cl.codigo inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on  pv.ccss = cs.cod_ccss
		
		where
		(p.fecha between  :fechaDesde and :fechaHasta) and
		(c.patente like :patente) and
		( c.unidad_neg_veh = :codUnidadNegocio and
		 gV.codigo = :codGrupoUN) and	
		(p.cliente= :codClienteInt) and
		(l.codArticulo = :codProducto) 
	
		order by p.fecha
    ]]>  
    
    </sql-query>
    
    <sql-query name="findConsumosPorGrupoVehiculos">
	    <query-param name="codCliente" type="string"/>
	    <query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>        	
		<query-param name="descripcionGrupoUN" type="string"/>	
		<query-param name="descripcionUnidadNegocio" type="string"/>	
		<query-param name="codUnidadNegocio" type="integer"/> 
      	<query-param name="codGrupoUN" type="integer"/> 
		
		
		select 
	
		g.codigo as codGrupoUN,
		g.descripcion as descGrupoUN,
		u.codigo as codUnidadN,
		u.descripcion as descUnidadN,
		
		sum(l.bultos1)as cantidadLitros,		
	    sum(isnull(l.bultos1 * l.precioKilo,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0)+ isnull(p.impuestoGr4,0) + isnull(p.iibb,0)+ isnull(p.piva,0)) as  total$,
	
		l.codArticulo as codProducto,
		l.descripcion as producto,
		p.cliente as codCliente,
		cl.descripcion as descrCli
		
		from mpedidos p, MpedidosLinea l, mpedidosdtcarga c, MunidadN u,
		mClientes cl, MgrupoUn g
		where
		(p.fecha between  :fechaDesde and :fechaHasta) and
		(l.sucursal = p.nroSucursal and
		l.codPedido = p.codigo) and
		(c.sucursal = p.nroSucursal and
		c.codigo_MP = p.codigo ) and
		(c.unidad_neg_veh = u.codigo and
		u.codGrupoUn = g.codigo and
		g.descripcion like :descripcionGrupoUN and
		u.descripcion like :descripcionUnidadNegocio) and
		(cl.codigo = p.cliente and
		cl.cod_cliente_alfa like :codCliente ) and
		(g.codigo = :codGrupoUN or :codGrupoUN = -1) and 
		(u.codigo = :codUnidadNegocio or :codUnidadNegocio = -1)
	
		group by g.codigo,g.descripcion,u.codigo,u.descripcion,l.codArticulo, l.descripcion,p.cliente,cl.descripcion
		order by g.descripcion			
    
    </sql-query>
    
    
    <sql-query name="findConsumosChoferes">
	    <query-param name="codCliente" type="string"/>
	    <query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>    
    	<query-param name="nombre" type="string"/>		
		<query-param name="descripcionUnidadNegocio" type="string"/>
		<query-param name="descripcionGrupoUN" type="string"/>
		<query-param name="codUnidadNegocio" type="integer"/>
		<query-param name="codGrupoUN" type="integer"/>
		
    
    	select 
	
		ch.dni as dni,	
		ch.apellido as apellidoChofer,
		ch.nombre as nombreChofer,

		u.codigo as codUnidadNeg,
		u.descripcion as descUnidadN,
		
		g.codigo as codGrupoUN,
		g.descripcion as descGrupoUN,

		sum(l.bultos1)as cantidadLitros,
		sum(isnull(l.bultos1 * l.precioKilo,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0)+ isnull(p.impuestoGr4,0)+ isnull(p.iibb,0)+ isnull(p.piva,0)) as  total$,

		l.codArticulo as codProducto,
		l.descripcion as producto,

		p.cliente as codCliente,
		ch.codigo as codChofer,
		cl.descripcion as descrCli 
		
		from mpedidos p, MpedidosLinea l, mpedidosdtcarga c, MunidadN u,
		mClientes cl, MgrupoUn g, mchofer ch
		where
		(p.fecha between  :fechaDesde and :fechaHasta) and

		(l.sucursal = p.nroSucursal and
		l.codPedido = p.codigo) and

		(c.sucursal = p.nroSucursal and
		 c.codigo_MP = p.codigo and 
		 c.dni = ch.dni and
		 ch.apellido like :nombre and 
		 ch.cod_cli = cl.codigo) and

		(c.unidad_neg = u.codigo and
		u.descripcion like :descripcionUnidadNegocio and
		u.codGrupoUn = g.codigo and
		g.descripcion like :descripcionGrupoUN) and
		(g.codigo = :codGrupoUN or :codGrupoUN = -1) and 
		(u.codigo = :codUnidadNegocio or :codUnidadNegocio = -1) and
		(cl.codigo = p.cliente and
		cl.cod_cliente_alfa like :codCliente) 
		
		
		group by ch.dni,ch.apellido,ch.nombre,u.codigo, u.descripcion,g.codigo,g.descripcion,l.codArticulo, 
		l.descripcion,p.cliente,ch.codigo,cl.descripcion 
		
		order by ch.apellido,ch.nombre
		
	</sql-query>
	
	
	
	 <sql-query name="findRemitosByClienteDNIProductoFechas">    
    	<query-param name="dni" type="integer"/>
		<query-param name="codClienteInt" type="integer"/>
		<query-param name="codProducto" type="integer"/>
		<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
     	<query-param name="codUnidadNegocio" type="integer"/> 
      	<query-param name="codGrupoUN" type="integer"/>    
		
    <![CDATA[    	
    	
		select 		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		l.bultos1 as cantidadLitros,
		
		isnull(l.bultos1 * l.precioKilo,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0)+ isnull(p.impuestoGr4,0)+ isnull(p.iibb,0)+ isnull(p.piva,0) as  total$,
		
		c.patente as patente, 
		ch.apellido as apellido,
		ch.nombre as nombre,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		uV.descripcion as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		gV.descripcion as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		uC.descripcion as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		gC.descripcion as descGrupoUNChofer,
		cs.desc_ccss,
		cl.descripcion as descrCli ,
		cl.cod_cliente_alfa as codalfa
		
		from mpedidos p inner join  MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join  mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente left join Mchofer ch
		on ch.dni = c.dni and ch.cod_cli = cl.codigo  inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss
		
		where
		(p.fecha between  :fechaDesde and :fechaHasta) and
		(c.unidad_neg = :codUnidadNegocio)  and
		(gC.codigo = :codGrupoUN) and
		
		(p.cliente= :codClienteInt ) and
		(ch.dni = :dni or :dni = -1) and
		(l.codArticulo = :codProducto) 		
				
		order by p.fecha		
    ]]>  
    
    </sql-query>
    
    
    
   
    <sql-query name="findConsumosPorGrupoChoferes">
	    <query-param name="codCliente" type="string"/>
	    <query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>        	
		<query-param name="descripcionGrupoUN" type="string"/>	
		<query-param name="descripcionUnidadNegocio" type="string"/>
		<query-param name="codUnidadNegocio" type="integer"/> 
      	<query-param name="codGrupoUN" type="integer"/> 		
		
		select 
	
		g.codigo as codGrupoUN,
		g.descripcion as descGrupoUN,
		u.codigo as codUnidadN,
		u.descripcion as descUnidadN,
		
		sum(l.bultos1)as cantidadLitros,		
		sum(isnull(l.bultos1 * l.precioKilo,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0)+ isnull(p.impuestoGr4,0)+ isnull(p.iibb,0)+ isnull(p.piva,0)) as  total$,
		

		l.codArticulo as codProducto,
		l.descripcion as producto,
		p.cliente as codCliente,
		cl.descripcion as descrCli
		
		from mpedidos p, MpedidosLinea l, mpedidosdtcarga c, MunidadN u,
		mClientes cl, MgrupoUn g
		where
		(p.fecha between  :fechaDesde and :fechaHasta) and
		(l.sucursal = p.nroSucursal and
		l.codPedido = p.codigo) and
		(c.sucursal = p.nroSucursal and
		c.codigo_MP = p.codigo ) and
		(c.unidad_neg = u.codigo and
		u.codGrupoUn = g.codigo and
		g.descripcion like :descripcionGrupoUN and
		u.descripcion like :descripcionUnidadNegocio) and
		(g.codigo = :codGrupoUN or :codGrupoUN = -1) and 
		(u.codigo = :codUnidadNegocio or :codUnidadNegocio = -1) and
		(cl.codigo = p.cliente and
		cl.cod_cliente_alfa like :codCliente ) 
	
		group by g.codigo,g.descripcion,u.codigo,u.descripcion,l.codArticulo, l.descripcion,p.cliente,cl.descripcion
		order by g.descripcion			
    	
    
    </sql-query>
    
    
    <sql-query name="findRemitosByClienteProductoFechas">        
		<query-param name="codClienteInt" type="integer"/>
		<query-param name="codProducto" type="integer"/>
		<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
     	<query-param name="codUnidadNegocio" type="integer"/> 
      	<query-param name="codGrupoUN" type="integer"/> 
	    
    <![CDATA[
    	
		select 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		l.bultos1 as cantidadLitros,
		isnull(l.bultos1 * l.precioKilo,0) + isnull(p.IvaBasico,0) + isnull(p.IvaAdicional,0)+ isnull(p.impuestoGr1,0)+ isnull(p.impuestoGr2,0)+ isnull(p.impuestoGr3,0) + isnull(p.impuestoGr4,0)+ isnull(p.iibb,0)+ isnull(p.piva,0) as  total$,
	
		c.patente as patente, 
		ch.apellido as apellido,
		ch.nombre as nombre,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		uV.descripcion as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		gV.descripcion as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		uC.descripcion as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		gC.descripcion as descGrupoUNChofer,
		cs.desc_ccss,
		cl.descripcion as descrCli ,
		cl.cod_cliente_alfa as codalfa
		
		from mpedidos p inner join  MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join  mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join  MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente left join Mchofer ch
		on ch.dni = c.dni and ch.cod_cli = cl.codigo inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on  pv.ccss = cs.cod_ccss
		where
		(p.fecha between  :fechaDesde and :fechaHasta) and
		( c.unidad_neg = :codUnidadNegocio and
		 gC.codigo = :codGrupoUN) and		
		( p.cliente= :codClienteInt ) and		
		(l.codArticulo = :codProducto) 			
		order by p.fecha
    ]]>  
    
    </sql-query>
    
    
    
    <sql-query name="findRemitosByCliente">        
		<query-param name="codCliente" type="string"/>		    
		
    	<![CDATA[
    	
    	
    	select 		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		l.bultos1 as cantidadLitros,
	
		sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total$,
		c.patente as patente, 
		ch.apellido as choferApellido,
		ch.nombre as choferNombre,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		uV.descripcion as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		gV.descripcion as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		uC.descripcion as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		gC.descripcion as descGrupoUNChofer,
		cs.desc_ccss as codSeccion,
		cl.cod_cliente_alfa as clienteAlfa,
		cl.descripcion as razonSocial,
		l.precioCImp as precioKilo,
isnull(p.piva,0) as periva,
isnull(p.iibb,0) as iibb
		
		from mpedidos p inner join MpedidosLinea l
		on (l.sucursal = p.nroSucursal and l.codPedido = p.codigo) inner join mpedidosdtcarga c
		on (c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo) inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join mvehiculo v
		on c.cod_vehiculo = v.codigo and v.codCliente   = p.cliente inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join  MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss left join mchofer ch
		on c.dni =  ch.dni and ch.cod_cli = cl.codigo
		

		where
		

		cl.cod_cliente_alfa like :codCliente and 	
		p.codRemito not in (select nroRemito 
				   from MFacturasV 
				   where 
				   not nroRemito is null and 
				   nroRemito <> 0
				   and nrosucursal = p.nroSucursal and cliente=p.cliente)
		and p.codRemito not in (select d.nroRemito				   
   				   from MRemitoFactura d
				   where  d.nroRemito =  p.codRemito
	 		           and  d.suc_rto =  p.nroSucursal) 
	and	(pv.sucursal = p.nroSucursal and
		 pv.ccss = cs.cod_ccss)	
 		

	
		group by
		p.codigo,p.fecha ,p.nroSucursal,p.codRemito,
		l.codArticulo ,	l.descripcion ,	l.bultos1 ,
		l.PrecioCImp, l.bultos1,c.patente , ch.apellido ,	
		ch.nombre ,c.unidad_neg_veh ,	uV.descripcion ,
		uV.codGrupoUn ,	gV.descripcion ,c.unidad_neg ,
		uC.descripcion ,uC.codGrupoUn ,	gC.descripcion ,
		cs.desc_ccss,cl.cod_cliente_alfa ,cl.descripcion ,l.precioCImp,

isnull(p.piva,0)  ,
isnull(p.iibb ,0)
		
		
		order by p.fecha
		
		
    ]]>  
    
    </sql-query>
    
    <sql-query name="findRemitosAFacturar">        
		<query-param name="codCliente" type="integer"/>		    
		
    	<![CDATA[
    	
    	 select isnull(sum( isnull(l.PrecioCImp,0) * l.bultos1) + sum(isnull(p.iibb,0)) + sum(isnull(p.piva,0)) ,0)	as total
				
		from mpedidos p inner join MpedidosLinea l
		on (l.sucursal = p.nroSucursal and l.codPedido = p.codigo) 
		inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss 
			
		where
		
		(p.cliente = :codCliente or :codCliente = -1) and
				
		p.codRemito not in (select nroRemito 
				   from MFacturasV 
				   where 
				   not nroRemito is null and 
				   nroRemito <> 0
				   and nrosucursal = p.nroSucursal and cliente = p.cliente)		

		and  not exists (select d.nroRemito				   
   				   from MRemitoFactura d
				   where  d.nroRemito =  p.codRemito
	 		           and  d.suc_rto =  p.nroSucursal)	

		and	(pv.sucursal = p.nroSucursal and
		 	pv.ccss = cs.cod_ccss)
		 	
		 	
		
    ]]>  
    
    </sql-query>
    
    
    
    
    
    
    <sql-query name="findRemitosPorCienteyOrdenFactura">        
		<query-param name="codCliente" type="string"/>	
		<query-param name="ordenFactura" type="integer"/>		    
		
    	<![CDATA[
    	
		select 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		l.bultos1 as cantidadLitros,
		sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total2$,

		c.patente as patente, 
		ch.apellido as apellido,
		ch.nombre as nombre,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		uV.descripcion as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		gV.descripcion as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		uC.descripcion as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		gC.descripcion as descGrupoUNChofer,
		cs.desc_ccss as descccss,
		isnull(l.bultos1 * l.precioKilo,0) as impSinImp,
		cl.cod_cliente_alfa as clienteAlfa,
		cl.descripcion as razonSocial,		
	    isnull(l.PrecioCImp,0) as impocimpu,
	    l.codlinea as codlinea
	
	
		from mpedidos p inner join MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg  = uC.codigo left join MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente left join mchofer ch
		on ch.dni = c.dni and ch.cod_cli = cl.codigo inner join mremitofactura rf
		on rf.nroremito = p.codRemito   and rf.suc_rto = p.nroSucursal inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss	
		
		where
		

		cl.cod_cliente_alfa like :codCliente  and
		rf.ordenFactura = :ordenFactura


 		group by

		p.codigo,
		p.fecha , p.nroSucursal ,p.codRemito ,	l.codArticulo ,
		l.descripcion ,		
		l.bultos1 , l.precioKilo,p.IvaBasico,p.IvaAdicional,l.impuestoGr1,l.impuestoGr2,l.impuestoGr3,p.iibb,p.piva,
	    c.patente, 	ch.apellido,ch.nombre,	c.unidad_neg_veh,
		uV.descripcion,	uV.codGrupoUn ,	gV.descripcion ,c.unidad_neg ,
		uC.descripcion ,	uC.codGrupoUn ,	gC.descripcion ,cs.desc_ccss ,
		cl.cod_cliente_alfa ,cl.descripcion ,	l.PrecioCImp,
		p.ivaBasico,c.kilometros,	p.NroLiquidacionRefipass
		 ,p.iibb,cl.cod_cliente_alfa,cl.descripcion ,l.PrecioCImp, l.codlinea
			
		
    	
    	UNION
		
		select 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		l.bultos1 as cantidadLitros,
		sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total2$,

		c.patente as patente, 
		ch.apellido as apellido,
		ch.nombre as nombre,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		uV.descripcion as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		gV.descripcion as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		uC.descripcion as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		gC.descripcion as descGrupoUNChofer,
		cs.desc_ccss as descccss,
		isnull(l.bultos1 * l.precioKilo,0) as impSinImp,
		cl.cod_cliente_alfa as clienteAlfa,
		cl.descripcion as razonSocial,		
	    isnull(l.PrecioCImp,0) as impocimpu	,
		l.codlinea as codlinea	
	
		from mpedidos p inner join MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg  = uC.codigo left join MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente left join mchofer ch
		on ch.dni = c.dni and ch.cod_cli = cl.codigo inner join mremitofacturaanulada rf
		on rf.nroremito = p.codRemito   and rf.suc_rto = p.nroSucursal inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss
		
		where
		

		cl.cod_cliente_alfa like :codCliente  and
		rf.ordenFactura = :ordenFactura


 		group by

		p.codigo,
		p.fecha , p.nroSucursal ,p.codRemito ,	l.codArticulo ,
		l.descripcion ,		
		l.bultos1 , l.precioKilo,p.IvaBasico,p.IvaAdicional,l.impuestoGr1,l.impuestoGr2,l.impuestoGr3,p.iibb,p.piva,
	    c.patente, 	ch.apellido,ch.nombre,	c.unidad_neg_veh,
		uV.descripcion,	uV.codGrupoUn ,	gV.descripcion ,c.unidad_neg ,
		uC.descripcion ,	uC.codGrupoUn ,	gC.descripcion ,cs.desc_ccss ,
		cl.cod_cliente_alfa ,cl.descripcion ,	l.PrecioCImp,
		p.ivaBasico,c.kilometros,	p.NroLiquidacionRefipass
		 ,p.iibb,cl.cod_cliente_alfa,cl.descripcion ,l.PrecioCImp,l.codlinea
			
		 order by p.fecha
    ]]>  
    
    </sql-query>
    
    
    
     <sql-query name="findRemitosPorCienteRemitoSucursal">        
		<query-param name="codCliente" type="string"/>	
		<query-param name="nroRemito" type="integer"/>	
		<query-param name="nroSucursal" type="integer"/>		    
		
    	<![CDATA[   
   		
		select 		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		l.bultos1 as cantidadLitros,
		
		isnull(l.PrecioCImp,0) * l.bultos1	 as  total2$,

		c.patente as patente, 
		ch.apellido as apellido,
		ch.nombre as nombre,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		uV.descripcion as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		gV.descripcion as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		uC.descripcion as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		gC.descripcion as descGrupoUNChofer,
		cs.desc_ccss as ccss,
		isnull(l.bultos1 * l.precioKilo,0) as impSinImp,
		cl.cod_cliente_alfa as clienteAlfa,
		cl.descripcion as razonSocial,
		isnull(l.PrecioCImp,0) as preciocImpu,
		l.codlinea as codlinea
		
		from mpedidos p inner join MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join  MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join  MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl 
		on cl.codigo = p.cliente left join Mchofer ch
		on ch.dni = c.dni and ch.cod_cli = cl.codigo inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal  inner join  mccss cs
		on  pv.ccss = cs.cod_ccss
			
		where		
		cl.cod_cliente_alfa like :codCliente and 
		(p.codRemito = :nroRemito and
		 p.nroSucursal = :nroSucursal)	
		     ]]>  
    
    </sql-query>
    
    
  
  	    				 
  	    <sql-query name="findRemitosFacturadoEnMFacturaV">    
    	<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="nroRemitoDesde" type="integer"/>
	    <query-param name="nroRemitoHasta" type="integer"/>
	    <query-param name="clienteDesde" type="string"/>
  	    <query-param name="clienteHasta" type="string"/>
	    <query-param name="nroSucursal" type="integer"/>
  	   <query-param name="fechaDesdeDos" type="timestamp"/>
	    <query-param name="fechaHastaDos" type="timestamp"/>  
  	    <query-param name="codCcss" type="integer"/>  
  	   <query-param name="verPrecioCImp" type="integer"/>
		 
	select 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,	
		REPLACE(REPLACE(isnull(l.descripcion ,''), char(10), ''), char(13),'') as producto,
		isnull(l.bultos1,0) as cantidadLitros,

		sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total$,
		REPLACE(REPLACE(isnull(c.patente ,''), char(10), ''), char(13),'') as patente, 
		REPLACE(REPLACE(isnull(ch.apellido ,''), char(10), ''), char(13),'') as ape,
		REPLACE(REPLACE(isnull(ch.nombre ,''), char(10), ''), char(13),'') as nom,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		REPLACE(REPLACE(isnull(uV.descripcion ,''), char(10), ''), char(13),'') as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		REPLACE(REPLACE(isnull(gV.descripcion ,''), char(10), ''), char(13),'') as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		REPLACE(REPLACE(isnull(uC.descripcion ,''), char(10), ''), char(13),'') as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		REPLACE(REPLACE(isnull(gC.descripcion ,''), char(10), ''), char(13),'') as descGrupoUNChofer,
		
		REPLACE(REPLACE(isnull(cs.desc_ccss ,''), char(10), ''), char(13),'')  as ccss,
		REPLACE(REPLACE(isnull(cl.cod_cliente_alfa ,''), char(10), ''), char(13),'')   as clienteAlfa,
		REPLACE(REPLACE(isnull(cl.descripcion ,''), char(10), ''), char(13),'')  as razonSocial,
		
		isnull(l.PrecioCImp,0) as precioLitro,
		
isnull(dbo.obtenerValorImpuestov2(dbo.fechaSinHora(p.fecha),l.codArticulo,2,p.crto_rto_cr,p.suc_rto_cr),0) as itcNuevo,
isnull(dbo.obtenerValorImpuestov2(p.fecha,l.codArticulo,dbo.obtenerCodImpuesto(l.codArticulo),p.crto_rto_cr,p.suc_rto_cr),0) as tasaFondoNuevo,

		isnull(p.ivaBasico,0) as iva,
		isnull(c.kilometros,0) as kilometraje,
		isnull(p.NroLiquidacionRefipass,0) as nroLiqui,
		v.codBarra as codBarra,
		p.nro_auto as codAutorizacion,
		f.nrosucursal as pref,
		f.nroFactura as nroFac,
		f.tipoComp as tipoComp,
		f.tipo as tipoFac,
		2 as cond,
		sum(isnull(l.bultos1 * l.precioKilo,0)) as impSinImp,
		isnull(p.iibb,0) as iibb,
		isnull(p.nroAsientoContable,0) as asiento,
		isnull(p.nroejerciciocontable,0) as ejercicio,
		--dbo.obtenerPrecioCImpDeListaPrecio(pv.ccss,l.codArticulo,p.fecha,p.cliente) as precioCImpDeLP,
		
  case when :verPrecioCImp = 1 then dbo.obtenerPrecioCImpDeListaPrecio(pv.ccss,l.codArticulo,p.fecha,p.cliente) else '0' end as precioCImpDeLP,
  
		f.fecha as fechaFacturacion,
 '---' as refacturacion,
 cs.cod_ccss as codccss,
 l.codlinea as codlinea,
 isnull(dbo.obtenerValorImpuestoLeyCba(dbo.fechaSinHora(p.fecha),l.codArticulo,6,p.crto_rto_cr,p.suc_rto_cr,pv.ccss),0)* l.bultos1 as impuestogr4Nuevo
 ,isnull(p.piva,0)  as perciva
 , isnull(dbo.obtenerValorImpuestoLeyCba(dbo.fechaSinHora(p.fecha),l.codArticulo,7,p.crto_rto_cr,p.suc_rto_cr,pv.ccss),0)* l.bultos1 as impuestogr5CO2
   		
		from   mpedidos p inner join MpedidosLinea l 
			on (l.sucursal = p.nroSucursal and l.codPedido = p.codigo) inner join mpedidosdtcarga c 
			on (c.sucursal = p.nroSucursal) and (c.codigo_MP = p.codigo) inner join  mvehiculo v
			on (c.cod_vehiculo = v.codigo and v.codCliente   = p.cliente) inner join MunidadN uV 
			on (c.unidad_neg_veh = uV.codigo) inner join MgrupoUn gV 
			on(uV.codGrupoUn = gV.codigo)  left join MunidadN uC
 			on (c.unidad_neg = uC.codigo) left join MgrupoUn gC
			on (uC.codGrupoUn = gC.codigo) inner join mClientes cl
			on (cl.codigo = p.cliente) inner join mPuntoVenta pv 
			on (pv.sucursal = p.nroSucursal) inner join mccss cs
			on (pv.ccss = cs.cod_ccss) inner join mfacturasV f
			on (f.nroRemito  = p.codRemito and p.nroSucursal = f.nroSucursal AND cl.codigo = f.cliente)left join mchofer ch
			on ch.dni = c.dni and ch.cod_cli = cl.codigo
		   
			
		where
		(dbo.fechaSinHora(p.fecha) between dbo.fechaSinHora(:fechaDesde) and dbo.fechaSinHora(:fechaHasta) or  (dbo.fechaSinHora(:fechaDesde)  is  null  and dbo.fechaSinHora(:fechaHasta) is null)) and    	
    	(cl.cod_cliente_alfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) and
	    (p.codRemito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null )) and
	    (p.nroSucursal = :nroSucursal or  :nroSucursal = -1)	and 
	    (dbo.fechaSinHora(f.fecha) between dbo.fechaSinHora(:fechaDesdeDos) and dbo.fechaSinHora(:fechaHastaDos) or  (dbo.fechaSinHora(:fechaDesdeDos)  is  null  and dbo.fechaSinHora(:fechaHastaDos) is null)) 
    	and (pv.ccss = :codCcss or :codCcss = -1)
	  
	    group by

		p.codigo,
		p.fecha , p.nroSucursal ,p.codRemito ,	l.codArticulo ,
		l.descripcion ,		
		l.bultos1 , l.precioKilo,p.IvaBasico,p.IvaAdicional,l.impuestoGr1,l.impuestoGr2,l.impuestoGr3,p.iibb,p.piva,
	    c.patente, 	ch.apellido,ch.nombre,	c.unidad_neg_veh,
		uV.descripcion,	uV.codGrupoUn ,	gV.descripcion ,c.unidad_neg ,
		uC.descripcion ,	uC.codGrupoUn ,	gC.descripcion ,cs.desc_ccss ,
		cl.cod_cliente_alfa ,cl.descripcion ,	l.PrecioCImp,p.crto_rto_cr,p.suc_rto_cr,
		p.ivaBasico,c.kilometros,	p.NroLiquidacionRefipass,
		v.codBarra ,p.nro_auto ,f.nrosucursal ,	f.nroFactura ,
		f.tipoComp,	f.tipo ,p.iibb,p.nroAsientoContable,p.nroejerciciocontable,pv.ccss,l.codArticulo,p.fecha,p.cliente,f.fecha,cs.cod_ccss , l.codlinea,l.impuestoGr4
		,p.piva,l.impuestoGr5
			
		 order by p.fecha	 
	    
  	    </sql-query>
  	    
								 
  	    <sql-query name="findRemitosFacturadoEnMRemitoFactura">    
    	<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="nroRemitoDesde" type="integer"/>
	    <query-param name="nroRemitoHasta" type="integer"/>
	    <query-param name="clienteDesde" type="string"/>
  	    <query-param name="clienteHasta" type="string"/>
  	     <query-param name="nroSucursal" type="integer"/>
  	    <query-param name="fechaDesdeDos" type="timestamp"/>
	    <query-param name="fechaHastaDos" type="timestamp"/>
	     <query-param name="codCcss" type="integer"/>
		 <query-param name="verPrecioCImp" type="integer"/>
	
				
			SELECT	
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,		 
		REPLACE(REPLACE(isnull(l.descripcion,''), char(10), ''), char(13),'') as producto,
		isnull(l.bultos1,0) as cantidadLitros,		
		sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total$,		
		REPLACE(REPLACE(isnull(c.patente,''), char(10), ''), char(13),'') as patente, 
		REPLACE(REPLACE(isnull(ch.apellido,''), char(10), ''), char(13),'') as ape,
		REPLACE(REPLACE(isnull(ch.nombre,''), char(10), ''), char(13),'') as nom,		
		c.unidad_neg_veh as codUnidadNVehiculo,
		REPLACE(REPLACE(isnull(uV.descripcion,''), char(10), ''), char(13),'') as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		REPLACE(REPLACE(isnull(gV.descripcion,''), char(10), ''), char(13),'')  as descGrupoUNVehiculo,		
		c.unidad_neg as codUnidadNChofer,
		REPLACE(REPLACE(isnull(uC.descripcion,''), char(10), ''), char(13),'') as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		REPLACE(REPLACE(isnull(gC.descripcion,''), char(10), ''), char(13),'') as descGrupoUNChofer,
		REPLACE(REPLACE(isnull(cs.desc_ccss,''), char(10), ''), char(13),'') as ccss,
		REPLACE(REPLACE(isnull(cl.cod_cliente_alfa,''), char(10), ''), char(13),'') as clienteAlfa,
		REPLACE(REPLACE(isnull(cl.descripcion,''), char(10), ''), char(13),'') as razonSocial,		
		isnull(l.PrecioCImp,0) as precioLitro,		
isnull(dbo.obtenerValorImpuestov2(dbo.fechaSinHora(p.fecha),l.codArticulo,2,p.crto_rto_cr,p.suc_rto_cr),0) as itcNuevo,
isnull(dbo.obtenerValorImpuestov2(p.fecha,l.codArticulo,dbo.obtenerCodImpuesto(l.codArticulo),p.crto_rto_cr,p.suc_rto_cr),0)  as tasaFondoNuevo,
		
		isnull(p.ivaBasico,0) as iva,
		isnull(c.kilometros,0) as kilometraje,
		isnull(p.NroLiquidacionRefipass,0) as nroLiqui,
		v.codBarra as codBarra,
		p.nro_auto as codAutorizacion,
		isnull(f.nrosucursal,0) as pref,
		isnull(f.nroFactura,0) as nroFac,
		f.tipoComp as tipoComp,
		f.tipo as tipoFac,
		1	as cond,
		sum(isnull(l.bultos1 * l.precioKilo,0)) as impSinImp,
		isnull(p.iibb,0) as iibb,
		isnull(p.nroAsientoContable,0) as asiento,
		isnull(p.nroejerciciocontable,0) as ejercicio,
		--dbo.obtenerPrecioCImpDeListaPrecio(pv.ccss,l.codArticulo,p.fecha,p.cliente) as precioCImpDeLP,
		
  case when :verPrecioCImp = 1 then dbo.obtenerPrecioCImpDeListaPrecio(pv.ccss,l.codArticulo,p.fecha,p.cliente) else '0' end as precioCImpDeLP,
		f.fecha as fechaFacturacion,
'-' as refacturacion, 
 cs.cod_ccss as codccss,
 l.codlinea as codlinea,
 isnull(dbo.obtenerValorImpuestoLeyCba(dbo.fechaSinHora(p.fecha),l.codArticulo,6,p.crto_rto_cr,p.suc_rto_cr,pv.ccss),0)* l.bultos1 as impuestogr4Nuevo 

,isnull(p.piva,0) as perciva
,isnull(dbo.obtenerValorImpuestoLeyCba(dbo.fechaSinHora(p.fecha),l.codArticulo,7,p.crto_rto_cr,p.suc_rto_cr,pv.ccss),0)* l.bultos1 as impuestogr5CO2 

	
 
			
		from mpedidos p inner join MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join mvehiculo v
		on c.cod_vehiculo = v.codigo and v.codCliente   = p.cliente inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo  inner join  MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss inner join mremitoFactura rf
		
		on p.codRemito = rf.nroremito and rf.suc_rto = p.nroSucursal inner join  mfacturasV f
		
		on rf.ordenfactura = f.orden left join mChofer ch
		on (c.dni = ch.dni and cl.codigo = ch.cod_cli)
		
		
		where			
			
		(dbo.fechaSinHora(p.fecha) between dbo.fechaSinHora(:fechaDesde) and dbo.fechaSinHora(:fechaHasta) or  (dbo.fechaSinHora(:fechaDesde)  is  null  and dbo.fechaSinHora(:fechaHasta) is null)) and    	
        (cl.cod_cliente_alfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) and
		(f.nroRemito=0) and
		(p.codRemito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null ))  and
		(p.nroSucursal = :nroSucursal or  :nroSucursal = -1) and		
	    (dbo.fechaSinHora(f.fecha) between dbo.fechaSinHora(:fechaDesdeDos) and dbo.fechaSinHora(:fechaHastaDos) or  (dbo.fechaSinHora(:fechaDesdeDos)  is  null  and dbo.fechaSinHora(:fechaHastaDos) is null)) 
    	and (pv.ccss = :codCcss or :codCcss = -1)
		
		group by
		
		p.codigo,p.fecha ,p.nroSucursal ,p.codRemito ,	l.codArticulo ,
		l.descripcion , l.bultos1 , l.precioKilo,p.IvaBasico,p.IvaAdicional,
		l.impuestoGr1,l.impuestoGr2,l.impuestoGr3,p.iibb,p.piva,
		c.patente, 	ch.apellido, ch.nombre,	c.unidad_neg_veh,
		uV.descripcion,	uV.codGrupoUn ,	gV.descripcion ,c.unidad_neg ,
		uC.descripcion ,uC.codGrupoUn ,	gC.descripcion ,cs.desc_ccss ,
		cl.cod_cliente_alfa ,cl.descripcion ,l.PrecioCImp,p.crto_rto_cr,p.suc_rto_cr,	p.ivaBasico,
		c.kilometros,p.NroLiquidacionRefipass,v.codBarra ,p.nro_auto ,f.nrosucursal ,	f.nroFactura ,
		f.tipoComp,	f.tipo , p.iibb,p.nroAsientoContable,p.nroejerciciocontable,pv.ccss,l.codArticulo,p.fecha,p.cliente,f.fecha,cs.cod_ccss , l.codlinea,l.impuestoGr4
		,p.piva, l.impuestoGr5
				order by p.fecha 
		
		</sql-query>
		
		
		
		    <sql-query name="findRemitosFacturadoEnMRemitoFacturaRefacturados">    
    	<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="nroRemitoDesde" type="integer"/>
	    <query-param name="nroRemitoHasta" type="integer"/>
	    <query-param name="clienteDesde" type="string"/>
  	    <query-param name="clienteHasta" type="string"/>
  	     <query-param name="nroSucursal" type="integer"/>
  	    <query-param name="fechaDesdeDos" type="timestamp"/>
	    <query-param name="fechaHastaDos" type="timestamp"/>
	     <query-param name="codCcss" type="integer"/>
		 
	
				
				
select 
codigo_pedido 	as	codigo_pedido 	,
fecha	as	fecha	,
sucursal	as	sucursal	,
remito	as	remito	,
codproducto	as	codproducto	,
producto	as	producto	,
cantidadLitros	as	cantidadLitros	,
total$	as	total$	,
patente	as	patente	,
ape	as	ape	,
nom	as	nom	,
codUnidadNvehiculo	as	codUnidadNvehiculo	,
descUnidadNVehiculo	as	descUnidadNVehiculo	,
codGrupoUNVehiculo	as	codGrupoUNVehiculo	,
descGrupoUNVehiculo	as	descGrupoUNVehiculo	,
codUnidadNChofer	as	codUnidadNChofer	,
descUnidadNchofer	as	descUnidadNchofer	,
codGrupoUNChofer	as	codGrupoUNChofer	,
descGrupoUNChofer	as	descGrupoUNChofer	,
ccss	as	ccss	,
clientealfa	as	clientealfa	,
razonSocial	as	razonSocial	,
precioLitro	as	precioLitro	,
itcNuevo	as	itcNuevo	,
tasaFondoNuevo	as	tasaFondoNuevo	,
iva	as	iva	,
kilometraje	as	kilometraje	,
nroliqui	as	nroliqui	,
codBarra	as	codBarra	,
codAutorizacion	as	codAutorizacion	,
pref	as	pref	,
nrofac	as	nrofac	,
tipocomp	as	tipocomp	,
tipofac	as	tipofac	,
cond	as	cond	,
impsinimp	as	impsinimp	,
iibb	as	iibb	,
asiento	as	asiento	,
ejercicio	as	ejercicio	,
precioCimpdelp	as	precioCimpdelp	,
fechaFacturacion	as	fechaFacturacion	,
refacturacion	as	refacturacion	,
codccss	as	codccss,
isnull(p.impuestoGr4,0)	

from vRemitosFacturadoEnMRemitoFacturaRefacturado p
WHERE
	(dbo.fechaSinHora(fecha) between dbo.fechaSinHora(:fechaDesde) and dbo.fechaSinHora(:fechaHasta) or  (dbo.fechaSinHora(:fechaDesde)  is  null  and dbo.fechaSinHora(:fechaHasta) is null)) and    	
    	(clienteAlfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) and
	    (remito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null )) and
	    (sucursal = :nroSucursal or  :nroSucursal = -1)	and 
	    (dbo.fechaSinHora(fechaFacturacion) between dbo.fechaSinHora(:fechaDesdeDos) and dbo.fechaSinHora(:fechaHastaDos) or  (dbo.fechaSinHora(:fechaDesdeDos)  is  null  and dbo.fechaSinHora(:fechaHastaDos) is null)) 
    	and (codccss = :codCcss or :codCcss = -1) 
		
		</sql-query>
		
	
		
  	    <sql-query name="findRemitosNoFacturados">    
    	<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="nroRemitoDesde" type="integer"/>
	    <query-param name="nroRemitoHasta" type="integer"/>
	    <query-param name="clienteDesde" type="string"/>
  	    <query-param name="clienteHasta" type="string"/>
  	    <query-param name="nroSucursal" type="integer"/>
  	    <query-param name="codCcss" type="integer"/>
  	    <query-param name="verPrecioCImp" type="integer"/>

  	    <![CDATA[  
  	    
SELECT     TOP 100 PERCENT p.Codigo AS codigo_pedido, p.Fecha AS fecha, p.nroSucursal AS sucursal, p.CodRemito AS remito, l.CodArticulo AS codProducto, 
                      l.Descripcion AS producto, ISNULL(l.Bultos1, 0) AS cantidadLitros, SUM(ISNULL(l.PrecioCImp, 0) * l.Bultos1) AS total$, 
                      REPLACE(REPLACE(ISNULL(c.patente, ''), CHAR(10), ''), CHAR(13), '') AS patente, REPLACE(REPLACE(ISNULL(ch.apellido, ''), CHAR(10), ''), CHAR(13), '') 
                      AS ape, REPLACE(REPLACE(ISNULL(ch.nombre, ''), CHAR(10), ''), CHAR(13), '') AS nom, c.unidad_neg_veh AS codUnidadNVehiculo, 
                      REPLACE(REPLACE(ISNULL(uV.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descUnidadNVehiculo, uV.codGrupoUN AS codGrupoUNVehiculo, 
                      REPLACE(REPLACE(ISNULL(gV.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descGrupoUNVehiculo, c.unidad_neg AS codUnidadNChofer, 
                      REPLACE(REPLACE(ISNULL(uC.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descUnidadNChofer, uC.codGrupoUN AS codGrupoUNChofer, 
                      REPLACE(REPLACE(ISNULL(gC.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descGrupoUNChofer, REPLACE(REPLACE(ISNULL(cs.desc_ccss, ''), 
                      CHAR(10), ''), CHAR(13), '') AS ccss, REPLACE(REPLACE(ISNULL(cl.cod_cliente_alfa, ''), CHAR(10), ''), CHAR(13), '') AS clienteAlfa, 
                      REPLACE(REPLACE(ISNULL(cl.Descripcion, ''), CHAR(10), ''), CHAR(13), '') AS razonSocial, ISNULL(l.PrecioCImp, 0) AS precioLitro, 
                      isnull(dbo.obtenerValorImpuestoV2(dbo.fechaSinHora(p.Fecha), l.CodArticulo, 2, p.crto_rto_cr, p.suc_rto_cr),0) AS itcNuevo, 
                      isnull(dbo.obtenerValorImpuestoV2(p.Fecha, l.CodArticulo, dbo.obtenerCodImpuesto(l.CodArticulo), p.crto_rto_cr, p.suc_rto_cr),0) AS tasaFondoNuevo, 
                      ISNULL(p.IvaBasico, 0) AS iva, ISNULL(c.kilometros, 0) AS kilometraje, p.NroLiquidacionRefipass AS nroLiqui, v.codBarra AS codBarra, 
                      p.nro_auto AS codAutorizacion, 0 AS pref, 0 AS nroFac, ' ' AS tipoComp, ' ' AS tipofac, 1 AS cond, SUM(ISNULL(l.Bultos1 * l.PrecioKilo, 0)) AS impSinImp,
                       ISNULL(p.iibb, 0) AS iibb, ISNULL(p.NroAsientoContable, 0) AS asiento, ISNULL(p.NroEjercicioContable, 0) AS ejercicio, 
                      --dbo.obtenerPrecioCImpDeListaPrecio(pv.ccss, l.CodArticulo, p.Fecha,p.cliente) AS precioCImpDeLP, 
                      case when :verPrecioCImp = 1 then dbo.obtenerPrecioCImpDeListaPrecio(pv.ccss, l.CodArticulo, p.Fecha,p.cliente) else '0' end as precioCImpDeLP,
                      
                      NULL AS fechaFacturacion, 
                     '-' AS refacturacion, cs.cod_ccss as codccss,l.codlinea as codlinea,
                     
                       isnull(dbo.obtenerValorImpuestoLeyCba(dbo.fechaSinHora(p.fecha),l.codArticulo,6,p.crto_rto_cr,p.suc_rto_cr,pv.ccss),0)* l.bultos1 as impuestogr4Nuevo
                       ,isnull(p.piva,0)  as perciva
                       , isnull(dbo.obtenerValorImpuestoLeyCba(dbo.fechaSinHora(p.fecha),l.codArticulo,7,p.crto_rto_cr,p.suc_rto_cr,pv.ccss),0)* l.bultos1 as impuestogr5CO2
                     
FROM         dbo.MPedidos p INNER JOIN
                      dbo.mPedidosLinea l ON l.Sucursal = p.nroSucursal AND l.CodPedido = p.Codigo INNER JOIN
                      dbo.MPedidosDtCarga c ON c.sucursal = p.nroSucursal AND c.codigo_MP = p.Codigo INNER JOIN
                      dbo.mUnidadN uV ON c.unidad_neg_veh = uV.codigo INNER JOIN
                      dbo.mVehiculo v ON c.cod_vehiculo = v.codigo AND v.codCliente = p.Cliente INNER JOIN
                      dbo.MGrupoUN gV ON uV.codGrupoUN = gV.codigo LEFT OUTER JOIN
                      dbo.mUnidadN uC ON c.unidad_neg = uC.codigo LEFT OUTER JOIN
                      dbo.MGrupoUN gC ON uC.codGrupoUN = gC.codigo INNER JOIN
                      dbo.MClientes cl ON cl.Codigo = p.Cliente INNER JOIN
                      dbo.MPuntoVenta pv ON pv.Sucursal = p.nroSucursal INNER JOIN
                      dbo.MCcss cs ON pv.ccss = cs.cod_ccss LEFT OUTER JOIN
                      dbo.MChofer ch ON c.dni = ch.dni AND ch.cod_cli = cl.Codigo 
WHERE     p.CodRemito NOT IN
                          (SELECT     nroRemito
                            FROM          MFacturasV
                            WHERE      NOT nroRemito IS NULL AND nroRemito <> 0 AND nrosucursal = p.nroSucursal 
                            and cliente=p.cliente) 
          AND NOT EXISTS
                          (SELECT     d.nroRemito
                            FROM          MRemitoFactura d
                            WHERE      d.nroRemito = p.codRemito AND d.suc_rto = p.nroSucursal)


  
 	and	(p.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 
	and	(cl.cod_cliente_alfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) 
	and	(p.codRemito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null )) 
		and (p.nroSucursal = :nroSucursal or  :nroSucursal = -1)
		and (pv.ccss = :codCcss or :codCcss = -1)		

GROUP BY p.Codigo, p.Fecha, p.nroSucursal, p.CodRemito, l.CodArticulo, l.Descripcion, l.Bultos1, l.PrecioKilo, p.IvaBasico, p.IvaAdicional, l.ImpuestoGr1, 
                      l.ImpuestoGr2, l.ImpuestoGr3, p.iibb, p.piva, c.patente, ch.apellido, ch.nombre, c.unidad_neg_veh, uV.descripcion, uV.codGrupoUN, gV.descripcion, 
                      c.unidad_neg, uC.descripcion, uC.codGrupoUN, gC.descripcion, cs.desc_ccss, cl.cod_cliente_alfa, cl.Descripcion, l.PrecioCImp, p.crto_rto_cr, 
                      p.suc_rto_cr, p.IvaBasico, c.kilometros, p.NroLiquidacionRefipass, v.codBarra, p.nro_auto, p.iibb, p.NroAsientoContable, p.NroEjercicioContable, 
                      pv.ccss, l.CodArticulo, p.Fecha,p.cliente, cs.cod_ccss ,l.codlinea,l.ImpuestoGr4,p.piva ,l.ImpuestoGr5
ORDER BY p.Fecha

	
		 ]]> 
  	    </sql-query>
  	    
  	    
  	    
  	    <sql-query name="findRemitosNoFacturadosNoRefacturados">    
    	<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="nroRemitoDesde" type="integer"/>
	    <query-param name="nroRemitoHasta" type="integer"/>
	    <query-param name="clienteDesde" type="string"/>
  	    <query-param name="clienteHasta" type="string"/>
  	    <query-param name="nroSucursal" type="integer"/>
  	     <query-param name="codCcss" type="integer"/>
  	    
  	    <![CDATA[  

SELECT     TOP 100 PERCENT p.Codigo AS codigo_pedido, p.Fecha AS fecha, p.nroSucursal AS sucursal, p.CodRemito AS remito, l.CodArticulo AS codProducto, 
                      l.Descripcion AS producto, ISNULL(l.Bultos1, 0) AS cantidadLitros, SUM(ISNULL(l.PrecioCImp, 0) * l.Bultos1) AS total$, 
                      REPLACE(REPLACE(ISNULL(c.patente, ''), CHAR(10), ''), CHAR(13), '') AS patente, REPLACE(REPLACE(ISNULL(ch.apellido, ''), CHAR(10), ''), CHAR(13), '') 
                      AS ape, REPLACE(REPLACE(ISNULL(ch.nombre, ''), CHAR(10), ''), CHAR(13), '') AS nom, c.unidad_neg_veh AS codUnidadNVehiculo, 
                      REPLACE(REPLACE(ISNULL(uV.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descUnidadNVehiculo, uV.codGrupoUN AS codGrupoUNVehiculo, 
                      REPLACE(REPLACE(ISNULL(gV.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descGrupoUNVehiculo, c.unidad_neg AS codUnidadNChofer, 
                      REPLACE(REPLACE(ISNULL(uC.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descUnidadNChofer, uC.codGrupoUN AS codGrupoUNChofer, 
                      REPLACE(REPLACE(ISNULL(gC.descripcion, ''), CHAR(10), ''), CHAR(13), '') AS descGrupoUNChofer, REPLACE(REPLACE(ISNULL(cs.desc_ccss, ''), 
                      CHAR(10), ''), CHAR(13), '') AS ccss, REPLACE(REPLACE(ISNULL(cl.cod_cliente_alfa, ''), CHAR(10), ''), CHAR(13), '') AS clienteAlfa, 
                      REPLACE(REPLACE(ISNULL(cl.Descripcion, ''), CHAR(10), ''), CHAR(13), '') AS razonSocial, ISNULL(l.PrecioCImp, 0) AS precioLitro, 
                      isnull(dbo.obtenerValorImpuestoV2(dbo.fechaSinHora(p.Fecha), l.CodArticulo, 2, p.crto_rto_cr, p.suc_rto_cr),0) AS itcNuevo, 
                      isnull(dbo.obtenerValorImpuestoV2(p.Fecha, l.CodArticulo, dbo.obtenerCodImpuesto(l.CodArticulo), p.crto_rto_cr, p.suc_rto_cr),0) AS tasaFondoNuevo, 
                      ISNULL(p.IvaBasico, 0) AS iva, ISNULL(c.kilometros, 0) AS kilometraje, p.NroLiquidacionRefipass AS nroLiqui, v.codBarra AS codBarra, 
                      p.nro_auto AS codAutorizacion, 0 AS pref, 0 AS nroFac, ' ' AS tipoComp, ' ' AS tipofac, 1 AS cond, SUM(ISNULL(l.Bultos1 * l.PrecioKilo, 0)) AS impSinImp,
                       ISNULL(p.iibb, 0) AS iibb, ISNULL(p.NroAsientoContable, 0) AS asiento, ISNULL(p.NroEjercicioContable, 0) AS ejercicio, 
                      dbo.obtenerPrecioCImpDeListaPrecio(pv.ccss, l.CodArticulo, p.Fecha,p.cliente) AS precioCImpDeLP, NULL AS fechaFacturacion, 
                      ref.facturaAnulada AS refacturacion, cs.cod_ccss as codccss,isnull(p.impuestoGr4,0)
                      
FROM         dbo.MPedidos p INNER JOIN
                      dbo.mPedidosLinea l ON l.Sucursal = p.nroSucursal AND l.CodPedido = p.Codigo INNER JOIN
                      dbo.MPedidosDtCarga c ON c.sucursal = p.nroSucursal AND c.codigo_MP = p.Codigo INNER JOIN
                      dbo.mUnidadN uV ON c.unidad_neg_veh = uV.codigo INNER JOIN
                      dbo.mVehiculo v ON c.cod_vehiculo = v.codigo AND v.codCliente = p.Cliente INNER JOIN
                      dbo.MGrupoUN gV ON uV.codGrupoUN = gV.codigo LEFT OUTER JOIN
                      dbo.mUnidadN uC ON c.unidad_neg = uC.codigo LEFT OUTER JOIN
                      dbo.MGrupoUN gC ON uC.codGrupoUN = gC.codigo INNER JOIN
                      dbo.MClientes cl ON cl.Codigo = p.Cliente INNER JOIN
                      dbo.MPuntoVenta pv ON pv.Sucursal = p.nroSucursal INNER JOIN
                      dbo.MCcss cs ON pv.ccss = cs.cod_ccss LEFT OUTER JOIN
                      dbo.MChofer ch ON c.dni = ch.dni AND ch.cod_cli = cl.Codigo INNER JOIN
                      dbo.vfacturasanuladasremitos ref on p.codremito = ref.codremito and p.nrosucursal = ref.nrosucursal
WHERE     p.CodRemito NOT IN
                          (SELECT     nroRemito
                            FROM          MFacturasV
                            WHERE      NOT nroRemito IS NULL AND nroRemito <> 0 AND nrosucursal = p.nroSucursal) 
          AND NOT EXISTS
                          (SELECT     d.nroRemito
                            FROM          MRemitoFactura d
                            WHERE      d.nroRemito = p.codRemito AND d.suc_rto = p.nroSucursal)


  
 	and	(p.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 
	and	(cl.cod_cliente_alfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) 
	and	(p.codRemito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null )) 
		and (p.nroSucursal = :nroSucursal or  :nroSucursal = -1)
		and (pv.ccss = :codCcss or :codCcss = -1)		

GROUP BY p.Codigo, p.Fecha, p.nroSucursal, p.CodRemito, l.CodArticulo, l.Descripcion, l.Bultos1, l.PrecioKilo, p.IvaBasico, p.IvaAdicional, l.ImpuestoGr1, 
                      l.ImpuestoGr2, l.ImpuestoGr3, p.iibb, p.piva, c.patente, ch.apellido, ch.nombre, c.unidad_neg_veh, uV.descripcion, uV.codGrupoUN, gV.descripcion, 
                      c.unidad_neg, uC.descripcion, uC.codGrupoUN, gC.descripcion, cs.desc_ccss, cl.cod_cliente_alfa, cl.Descripcion, l.PrecioCImp, p.crto_rto_cr, 
                      p.suc_rto_cr, p.IvaBasico, c.kilometros, p.NroLiquidacionRefipass, v.codBarra, p.nro_auto, p.iibb, p.NroAsientoContable, p.NroEjercicioContable, 
                      pv.ccss, l.CodArticulo, p.Fecha,p.cliente,ref.facturaAnulada, cs.cod_ccss 
ORDER BY p.Fecha 
 ]]> 
  	    </sql-query>
 
  	    <sql-query name="finMesesMPedidos">  	    
			select distinct month(p.fecha) as mes,  ' ' as nombre
			from mpedidos p
				where month(p.fecha) is not null
			order by month(p.fecha) asc
  	    </sql-query>
  	    
  	     <sql-query name="finAniosMPedidos">  				
			select distinct year(p.fecha) as anio, year(p.fecha) as anioNombre
			from mpedidos p
			where year(p.fecha) is not null
			order by year(p.fecha) desc
  	    </sql-query>
  	    
  	 
  	    <sql-query name="findRemitosFacturadYNoFacturadosV_2">    
    	<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="nroRemitoDesde" type="integer"/>
	    <query-param name="nroRemitoHasta" type="integer"/>
	    <query-param name="clienteDesde" type="string"/>
  	    <query-param name="clienteHasta" type="string"/>
	    <query-param name="nroSucursal" type="integer"/> 	    
	    <query-param name="estado" type="integer"/> 	    
 <![CDATA[	    
/*FACTURADO EN FACTURAV*/  	     
  	    select 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,	
		REPLACE(REPLACE(isnull(l.descripcion ,''), char(10), ''), char(13),'') as producto,
		isnull(l.bultos1,0) as cantidadLitros,

		sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total$,
		REPLACE(REPLACE(isnull(c.patente ,''), char(10), ''), char(13),'') as patente, 
		REPLACE(REPLACE(isnull(ch.apellido ,''), char(10), ''), char(13),'') as ape,
		REPLACE(REPLACE(isnull(ch.nombre ,''), char(10), ''), char(13),'') as nom,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		REPLACE(REPLACE(isnull(uV.descripcion ,''), char(10), ''), char(13),'') as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		REPLACE(REPLACE(isnull(gV.descripcion ,''), char(10), ''), char(13),'') as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		REPLACE(REPLACE(isnull(uC.descripcion ,''), char(10), ''), char(13),'') as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		REPLACE(REPLACE(isnull(gC.descripcion ,''), char(10), ''), char(13),'') as descGrupoUNChofer,
		
		REPLACE(REPLACE(isnull(cs.desc_ccss ,''), char(10), ''), char(13),'')  as ccss,
		REPLACE(REPLACE(isnull(cl.cod_cliente_alfa ,''), char(10), ''), char(13),'')   as clienteAlfa,
		REPLACE(REPLACE(isnull(cl.descripcion ,''), char(10), ''), char(13),'')  as razonSocial,
		
		isnull(l.PrecioCImp,0) as precioLitro,
		
isnull(dbo.obtenerValorImpuesto(dbo.fechaSinHora(p.fecha),l.codArticulo,2),0) as itcNuevo,

isnull(dbo.obtenerValorImpuesto(p.fecha,l.codArticulo,dbo.obtenerCodImpuesto(l.codArticulo)),0) as tasaFondoNuevo,
		isnull(p.ivaBasico,0) as iva,
		isnull(c.kilometros,0) as kilometraje,
		isnull(p.NroLiquidacionRefipass,0) as nroLiqui,
		v.codBarra as codBarra,
		p.nro_auto as codAutorizacion,
		f.nrosucursal as pref,
		f.nroFactura as nroFac,
		f.tipoComp as tipoComp,
		f.tipo as tipoFac,
		2 as cond,
		sum(isnull(l.bultos1 * l.precioKilo,0)) as impSinImp,
		isnull(p.iibb,0) as iibb,
		isnull(p.nroAsientoContable,0) as asiento,
		isnull(p.nroejerciciocontable,0) as ejercicio,
		0 as estadoFact
		
		from   mpedidos p inner join MpedidosLinea l 
			on (l.sucursal = p.nroSucursal and l.codPedido = p.codigo) inner join mpedidosdtcarga c 
			on (c.sucursal = p.nroSucursal) and (c.codigo_MP = p.codigo) inner join  mvehiculo v
			on (c.cod_vehiculo = v.codigo and v.codCliente   = p.cliente) inner join MunidadN uV 
			on (c.unidad_neg_veh = uV.codigo) inner join MgrupoUn gV 
			on(uV.codGrupoUn = gV.codigo)  left join MunidadN uC
 			on (c.unidad_neg = uC.codigo) left join MgrupoUn gC
			on (uC.codGrupoUn = gC.codigo) inner join mClientes cl
			on (cl.codigo = p.cliente) inner join mPuntoVenta pv 
			on (pv.sucursal = p.nroSucursal) inner join mccss cs
			on (pv.ccss = cs.cod_ccss) inner join mfacturasV f
			on (f.nroRemito  = p.codRemito and p.nroSucursal = f.nroSucursal)left join mchofer ch
			on ch.dni = c.dni and ch.cod_cli = cl.codigo
		   
			
		where
		(p.fecha between :fechaDesde and dateadd(dd,1,:fechaHasta) or  :fechaDesde is  null  and dateadd(dd,1,:fechaHasta) is null) and
    	(cl.cod_cliente_alfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) and
	    (p.codRemito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null )) and
	    (p.nroSucursal = :nroSucursal or  :nroSucursal = -1)	
	    and  (0=:estado OR :estado=-1)
	  
	    group by

		p.codigo,
		p.fecha , p.nroSucursal ,p.codRemito ,	l.codArticulo ,
		l.descripcion ,		
		l.bultos1 , l.precioKilo,p.IvaBasico,p.IvaAdicional,l.impuestoGr1,l.impuestoGr2,l.impuestoGr3,p.iibb,p.piva,
	    c.patente, 	ch.apellido,ch.nombre,	c.unidad_neg_veh,
		uV.descripcion,	uV.codGrupoUn ,	gV.descripcion ,c.unidad_neg ,
		uC.descripcion ,	uC.codGrupoUn ,	gC.descripcion ,cs.desc_ccss ,
		cl.cod_cliente_alfa ,cl.descripcion ,	l.PrecioCImp,
		p.ivaBasico,c.kilometros,	p.NroLiquidacionRefipass,
		v.codBarra ,p.nro_auto ,f.nrosucursal ,	f.nroFactura ,
		f.tipoComp,	f.tipo ,p.iibb,p.nroAsientoContable,p.nroejerciciocontable
		
		UNION
		
/*FACTURADO EN FACTURAV en MremitoFactura*/				
SELECT 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,		 
		REPLACE(REPLACE(isnull(l.descripcion,''), char(10), ''), char(13),'') as producto,
		isnull(l.bultos1,0) as cantidadLitros,
		
sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total$,
		
		REPLACE(REPLACE(isnull(c.patente,''), char(10), ''), char(13),'') as patente, 
		REPLACE(REPLACE(isnull(ch.apellido,''), char(10), ''), char(13),'') as ape,
		REPLACE(REPLACE(isnull(ch.nombre,''), char(10), ''), char(13),'') as nom,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		REPLACE(REPLACE(isnull(uV.descripcion,''), char(10), ''), char(13),'') as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		REPLACE(REPLACE(isnull(gV.descripcion,''), char(10), ''), char(13),'')  as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		REPLACE(REPLACE(isnull(uC.descripcion,''), char(10), ''), char(13),'') as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		REPLACE(REPLACE(isnull(gC.descripcion,''), char(10), ''), char(13),'') as descGrupoUNChofer,
		REPLACE(REPLACE(isnull(cs.desc_ccss,''), char(10), ''), char(13),'') as ccss,
		REPLACE(REPLACE(isnull(cl.cod_cliente_alfa,''), char(10), ''), char(13),'') as clienteAlfa,
		REPLACE(REPLACE(isnull(cl.descripcion,''), char(10), ''), char(13),'') as razonSocial,
		
		isnull(l.PrecioCImp,0) as precioLitro,
		
isnull(dbo.obtenerValorImpuesto(dbo.fechaSinHora(p.fecha),l.codArticulo,2),0) as itcNuevo,
isnull(dbo.obtenerValorImpuesto(p.fecha,l.codArticulo,dbo.obtenerCodImpuesto(l.codArticulo)),0) as tasaFondoNuevo,


		isnull(p.ivaBasico,0) as iva,
		isnull(c.kilometros,0) as kilometraje,
		isnull(p.NroLiquidacionRefipass,0) as nroLiqui,
		v.codBarra as codBarra,
		p.nro_auto as codAutorizacion,
		isnull(f.nrosucursal,0) as pref,
		isnull(f.nroFactura,0) as nroFac,
		f.tipoComp as tipoComp,
		f.tipo as tipoFac,
		1	as cond,
		sum(isnull(l.bultos1 * l.precioKilo,0)) as impSinImp,
		isnull(p.iibb,0) as iibb,
		isnull(p.nroAsientoContable,0) as asiento,
		isnull(p.nroejerciciocontable,0) as ejercicio,
		0 as estadoFactura
			
		from mpedidos p inner join MpedidosLinea l
		on l.sucursal = p.nroSucursal and l.codPedido = p.codigo inner join mpedidosdtcarga c
		on c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo inner join mvehiculo v
		on c.cod_vehiculo = v.codigo and v.codCliente   = p.cliente inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo  inner join  MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss inner join mremitoFactura rf
		
		on p.codRemito = rf.nroremito and rf.suc_rto = p.nroSucursal inner join  mfacturasV f
		
		on rf.ordenfactura = f.orden left join mChofer ch
		on (c.dni = ch.dni and cl.codigo = ch.cod_cli)
		
		
		WHERE			
			
		(p.fecha between :fechaDesde and dateadd(dd,1,:fechaHasta) or  :fechaDesde is  null  and  dateadd(dd,1,:fechaHasta)  is null) and
		(cl.cod_cliente_alfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) and
		(f.nroRemito=0) and
		(p.codRemito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null ))  and
		(p.nroSucursal = :nroSucursal or  :nroSucursal = -1)
		and  (0=:estado OR :estado=-1)
		
		GROUP BY
		
		p.codigo,p.fecha ,p.nroSucursal ,p.codRemito ,	l.codArticulo ,
		l.descripcion , l.bultos1 , l.precioKilo,p.IvaBasico,p.IvaAdicional,
		l.impuestoGr1,l.impuestoGr2,l.impuestoGr3,p.iibb,p.piva,
		c.patente, 	ch.apellido, ch.nombre,	c.unidad_neg_veh,
		uV.descripcion,	uV.codGrupoUn ,	gV.descripcion ,c.unidad_neg ,
		uC.descripcion ,uC.codGrupoUn ,	gC.descripcion ,cs.desc_ccss ,
		cl.cod_cliente_alfa ,cl.descripcion ,l.PrecioCImp,	p.ivaBasico,
		c.kilometros,p.NroLiquidacionRefipass,v.codBarra ,p.nro_auto ,f.nrosucursal ,	f.nroFactura ,
		f.tipoComp,	f.tipo , p.iibb,p.nroAsientoContable,p.nroejerciciocontable
		
	UNION
		
/*NO FACTURADO*/
	 SELECT 
		
		p.codigo as codigo_pedido,
		p.fecha as fecha,
		p.nroSucursal as sucursal,
		p.codRemito as remito,
		l.codArticulo as codProducto,
		l.descripcion as producto,
		isnull(l.bultos1,0) as cantidadLitros,
		
sum(isnull(l.PrecioCImp,0) * l.bultos1)	 as  total$,
		
		REPLACE(REPLACE(isnull(c.patente,''), char(10), ''), char(13),'') as patente, 
		REPLACE(REPLACE(isnull(ch.apellido,''), char(10), ''), char(13),'')  as ape,
		REPLACE(REPLACE(isnull(ch.nombre,''), char(10), ''), char(13),'')  as nom,
		
		c.unidad_neg_veh as codUnidadNVehiculo,
		REPLACE(REPLACE(isnull(uV.descripcion,''), char(10), ''), char(13),'') as descUnidadNVehiculo,
		uV.codGrupoUn as codGrupoUNVehiculo,
		REPLACE(REPLACE(isnull(gV.descripcion,''), char(10), ''), char(13),'') as descGrupoUNVehiculo,
		
		c.unidad_neg as codUnidadNChofer,
		REPLACE(REPLACE(isnull(uC.descripcion,''), char(10), ''), char(13),'') as descUnidadNChofer,
		uC.codGrupoUn as codGrupoUNChofer,
		REPLACE(REPLACE(isnull(gC.descripcion,''), char(10), ''), char(13),'') as descGrupoUNChofer,
		REPLACE(REPLACE(isnull(cs.desc_ccss,''), char(10), ''), char(13),'') as ccss,
				
		REPLACE(REPLACE(isnull(cl.cod_cliente_alfa,''), char(10), ''), char(13),'') as clienteAlfa,
		REPLACE(REPLACE(isnull(cl.descripcion,''), char(10), ''), char(13),'') as razonSocial,
		
		isnull(l.PrecioCImp,0) as precioLitro,
		
isnull(dbo.obtenerValorImpuesto(dbo.fechaSinHora(p.fecha),l.codArticulo,2),0) as itcNuevo,
isnull(dbo.obtenerValorImpuesto(p.fecha,l.codArticulo,dbo.obtenerCodImpuesto(l.codArticulo)),0) as tasaFondoNuevo,

		isnull(p.ivaBasico,0) as iva,
		isnull(c.kilometros,0) as kilometraje,
		p.NroLiquidacionRefipass as nroLiqui,
		v.codBarra as codBarra,
		p.nro_auto as codAutorizacion,
		0 as pref,
		0 as nroFac,
		' ' as tipoComp,
		' ' as tipofact,
		1 as cond,
		sum(isnull(l.bultos1 * l.precioKilo,0)) as impSinImp,
		isnull(p.iibb,0) as iibb,
		isnull(p.nroAsientoContable,0) as asiento,
		isnull(p.nroejerciciocontable,0) as ejercicio,
		1 as noFactura
				
		from mpedidos p inner join MpedidosLinea l
		on (l.sucursal = p.nroSucursal and l.codPedido = p.codigo) inner join mpedidosdtcarga c
		on (c.sucursal = p.nroSucursal and c.codigo_MP = p.codigo) inner join MunidadN uV
		on c.unidad_neg_veh = uV.codigo inner join mvehiculo v
		on c.cod_vehiculo = v.codigo and v.codCliente   = p.cliente inner join MgrupoUn gV
		on uV.codGrupoUn = gV.codigo left join MunidadN uC
		on c.unidad_neg = uC.codigo left join  MgrupoUn gC
		on uC.codGrupoUn = gC.codigo inner join mClientes cl
		on cl.codigo = p.cliente inner join mPuntoVenta pv
		on pv.sucursal = p.nroSucursal inner join mccss cs
		on pv.ccss = cs.cod_ccss left join mchofer ch
		on c.dni =  ch.dni and ch.cod_cli = cl.codigo
		
			
		WHERE
		(p.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) and
		(cl.cod_cliente_alfa  between :clienteDesde and  :clienteHasta or :clienteDesde is null and :clienteHasta is null) and
		(p.codRemito between :nroRemitoDesde and :nroRemitoHasta or (:nroRemitoDesde is null and :nroRemitoHasta is null )) and

		 p.codRemito not in (select nroRemito 
				   from MFacturasV 
				   where 
				   not nroRemito is null and 
				   nroRemito <> 0
				   and nrosucursal = p.nroSucursal)

		and  not exists (select d.nroRemito				   
   				   from MRemitoFactura d
				   where  d.nroRemito =  p.codRemito
	 		           and  d.suc_rto =  p.nroSucursal)	

		and (p.nroSucursal = :nroSucursal or  :nroSucursal = -1)
		and  (1=:estado OR :estado=-1)
		
		GROUP BY

		p.codigo,
		p.fecha ,	p.nroSucursal ,	p.codRemito ,	l.codArticulo ,	l.descripcion ,
		l.bultos1 , l.precioKilo,p.IvaBasico,p.IvaAdicional,l.impuestoGr1,l.impuestoGr2,l.impuestoGr3,p.iibb,p.piva,
	    c.patente, 	ch.apellido,ch.nombre,	c.unidad_neg_veh,uV.descripcion,uV.codGrupoUn ,	gV.descripcion ,
		c.unidad_neg ,	uC.descripcion ,	uC.codGrupoUn ,	gC.descripcion ,cs.desc_ccss ,cl.cod_cliente_alfa ,
		cl.descripcion ,l.PrecioCImp,p.ivaBasico,c.kilometros,	p.NroLiquidacionRefipass,	v.codBarra ,
		p.nro_auto,p.iibb,p.nroAsientoContable,p.nroejerciciocontable				
		
		order by   p.fecha

	  ]]>
		 
  	    </sql-query>
  	    
  	    
  	    <sql-query name="findImpuestoLeyVialCba">        
		<query-param name="codProducto" type="integer" />
		<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="codCliente" type="integer"/>
  	    <query-param name="nroSucursal" type="integer"/>
  	    <query-param name="codCcss" type="integer"/>  	    
		
		<![CDATA[ 	

			SELECT   TOP 100 PERCENT p.Codigo AS codigo_pedido, p.Fecha AS fecha, p.nroSucursal AS sucursal, p.CodRemito AS remito, l.CodArticulo AS codProducto, 
			           l.Descripcion AS producto, ISNULL(l.Bultos1, 0) AS cantidadLitros, SUM(ISNULL(l.PrecioCImp, 0) * l.Bultos1) AS total$, 
			           REPLACE(REPLACE(ISNULL(c.patente, ''), CHAR(10), ''), CHAR(13), '') AS patente, REPLACE(REPLACE(ISNULL(ch.apellido, ''), CHAR(10), ''), CHAR(13), '') 
			           AS ape, REPLACE(REPLACE(ISNULL(ch.nombre, ''), CHAR(10), ''), CHAR(13), '') AS nom,  
			           REPLACE(REPLACE(ISNULL(cl.Descripcion, ''), CHAR(10), ''), CHAR(13), '') AS razonSocial, 
			          ISNULL( dbo.obtenerValorImpuesto(dbo.fechaSinHora(p.Fecha), l.CodArticulo, 6), 0) AS leyCba, 
			           cs.desc_ccss as desccss,
				   l.codlinea as codlinea,1 as estado 
			          
			FROM         dbo.MPedidos p INNER JOIN
			                      dbo.mPedidosLinea l ON l.Sucursal = p.nroSucursal AND l.CodPedido = p.Codigo INNER JOIN
			                      dbo.MPedidosDtCarga c ON c.sucursal = p.nroSucursal AND c.codigo_MP = p.Codigo INNER JOIN
			                      dbo.MClientes cl ON cl.Codigo = p.Cliente INNER JOIN
			 		      dbo.mVehiculo v ON c.cod_vehiculo = v.codigo AND v.codCliente = p.Cliente INNER JOIN
			                      dbo.MPuntoVenta pv ON pv.Sucursal = p.nroSucursal INNER JOIN
			                      dbo.MCcss cs ON pv.ccss = cs.cod_ccss LEFT OUTER JOIN
			                      dbo.MChofer ch ON c.dni = ch.dni AND ch.cod_cli = cl.Codigo 
						
			                      
			WHERE     p.CodRemito NOT IN
			                 (SELECT     nroRemito
			                   FROM          MFacturasV
			                   WHERE      NOT nroRemito IS NULL AND nroRemito <> 0 AND nrosucursal = p.nroSucursal) 
			          AND NOT EXISTS
			                 (SELECT     d.nroRemito
			                   FROM          MRemitoFactura d
			                   WHERE      d.nroRemito = p.codRemito AND d.suc_rto = p.nroSucursal)
			                              
			 	and	(p.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 
				and	(cl.codigo  = :codCliente or :codCliente = -1) 
				and (p.nroSucursal = :nroSucursal or  :nroSucursal = -1)
				and (pv.ccss = :codCcss or :codCcss = -1)		
				and (l.CodArticulo = :codProducto or :codProducto= - 1)	
			
			GROUP BY p.Codigo, p.Fecha, p.nroSucursal, p.CodRemito, l.CodArticulo, l.Descripcion, l.Bultos1,  c.patente, ch.apellido, ch.nombre, 
			                     l.CodArticulo, cs.desc_ccss ,l.codlinea,cl.Descripcion
			ORDER BY p.Fecha
		
		]]>		
    	</sql-query>
    	
    	<sql-query name="findImpuestoLeyVialCbaEnMFactv">        
		<query-param name="codProducto" type="integer" />
		<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    <query-param name="codCliente" type="integer"/>
  	    <query-param name="nroSucursal" type="integer"/>
  	    <query-param name="codCcss" type="integer"/>  	    
		
		<![CDATA[ 	

			SELECT     TOP 100 PERCENT p.Codigo AS codigo_pedido, p.Fecha AS fecha, p.nroSucursal AS sucursal, p.CodRemito AS remito, l.CodArticulo AS codProducto, 
			           l.Descripcion AS producto, ISNULL(l.Bultos1, 0) AS cantidadLitros, SUM(ISNULL(l.PrecioCImp, 0) * l.Bultos1) AS total$, 
			           REPLACE(REPLACE(ISNULL(c.patente, ''), CHAR(10), ''), CHAR(13), '') AS patente, REPLACE(REPLACE(ISNULL(ch.apellido, ''), CHAR(10), ''), CHAR(13), '') 
			           AS ape, REPLACE(REPLACE(ISNULL(ch.nombre, ''), CHAR(10), ''), CHAR(13), '') AS nom,  
			           REPLACE(REPLACE(ISNULL(cl.Descripcion, ''), CHAR(10), ''), CHAR(13), '') AS razonSocial, 
			            ISNULL( dbo.obtenerValorImpuesto(dbo.fechaSinHora(p.Fecha), l.CodArticulo, 6), 0) AS leyCba, cs.desc_ccss as desccss, l.codlinea as codlinea,0 as estado 
			          
			FROM         dbo.MPedidos p INNER JOIN
			             dbo.mPedidosLinea l ON l.Sucursal = p.nroSucursal AND l.CodPedido = p.Codigo INNER JOIN
			             dbo.MPedidosDtCarga c ON c.sucursal = p.nroSucursal AND c.codigo_MP = p.Codigo INNER JOIN
			             dbo.MClientes cl ON cl.Codigo = p.Cliente INNER JOIN
			 		     dbo.mVehiculo v ON c.cod_vehiculo = v.codigo AND v.codCliente = p.Cliente INNER JOIN
			             dbo.MPuntoVenta pv ON pv.Sucursal = p.nroSucursal INNER JOIN
			             dbo.MCcss cs ON pv.ccss = cs.cod_ccss LEFT OUTER JOIN
			             dbo.MChofer ch ON c.dni = ch.dni AND ch.cod_cli = cl.Codigo INNER JOIN
			             mFacturasV f   ON (f.nroRemito  = p.codRemito and p.nroSucursal = f.nroSucursal)
						
			                      
			WHERE   
			                              
			 	(p.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 
				and	(cl.codigo  = :codCliente or :codCliente = -1) 
				and (p.nroSucursal = :nroSucursal or  :nroSucursal = -1)
				and (pv.ccss = :codCcss or :codCcss = -1)		
				and (l.CodArticulo = :codProducto or :codProducto= - 1)	
			
			GROUP BY p.Codigo, p.Fecha, p.nroSucursal, p.CodRemito, l.CodArticulo, l.Descripcion, l.Bultos1,  c.patente, ch.apellido, ch.nombre, 
			                     l.CodArticulo, cs.desc_ccss ,l.codlinea,cl.Descripcion
			
			
			ORDER BY p.Fecha
			
		
		]]>		
    	</sql-query>
    	
    	
  	 <sql-query name="findAlicuota">
		<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    	    
		
		<![CDATA[ 	
				
				SELECT alicuota.texto,1 from (
	
SELECT 
	
CASE tipocomp
WHEN 'FC' THEN CASE F.Tipo WHEN 'A' THEN '001' WHEN 'B' THEN '006' END
WHEN 'ND' THEN CASE F.Tipo WHEN 'A' THEN '002' WHEN 'B' THEN '007' END
WHEN 'NC' THEN CASE F.Tipo WHEN 'A' THEN '003' WHEN 'B' THEN '008' END			
END + --as 'TipoComprobante',
dbo.rellenarConCeros(5, CONVERT(VARCHAR(5), f.nroSucursal)) + --as 'PuntoVenta'  ,					  
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobante,
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( F.NetoFactura  as decimal(13,2)))) + -- AS 'ImporteNetoGravado',
  
CASE f.IvaBasico
WHEN 0 THEN  '0003'
ELSE '0005'	
END + -- as 'AlicuotaIva',

dbo.rellenarConCeros(15, CONVERT(VARCHAR,  Cast(  f.IvaBasico as decimal(13,2)) ))  as texto --  as 'FechaVencimiento'
, F.NroFactura as  NroFactura	

/*,					       					 
tipocomp AS Tipo_Comprobante, F.Tipo AS Tipo, 
F.NetoFactura AS Neto_Gravado, 0 AS Exento, F.IvaBasico AS IVA, F.IvaAdicional AS IVA2, F.Gastos1 + F.Gastos2 + F.Gastos3 AS Otras_Percepciones, 
C.HiperCliente, C.CatIva, I.Descripcion, F.impuestoGr1 AS impuestoInterno, F.impuestoGr2 AS itc, F.impuestoGr3 AS tasaFondo, 
F.impuestoGr4 AS tasavialcba,   0 AS nogravado, 'CUIT' as 'descripcionDocumentoComprador'
*/

FROM         
mFacturasV F INNER JOIN
MClientes C ON F.Cliente = C.Codigo INNER JOIN
MCatIva I ON C.CatIva = I.Codigo

WHERE     
(F.FhBaja IS NULL) 
AND tipocomp = 'FC'
and	(F.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 

--AND tipo= 'A'
UNION ALL

SELECT	
			
CASE tipocomp
WHEN 'FC' THEN CASE F.Tipo WHEN 'A' THEN '001' WHEN 'B' THEN '006' END
WHEN 'ND' THEN CASE F.Tipo WHEN 'A' THEN '002' WHEN 'B' THEN '007' END
WHEN 'NC' THEN CASE F.Tipo WHEN 'A' THEN '003' WHEN 'B' THEN '008' END			
END + --as 'TipoComprobante',
dbo.rellenarConCeros(5, CONVERT(VARCHAR(5), f.nroSucursal)) + --as 'PuntoVenta'  ,					  
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobante,
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( F.NetoFactura  as decimal(13,2)))) + -- AS 'ImporteNetoGravado',
CASE f.IvaBasico
WHEN 0 THEN  '0003'
ELSE '0005'	
END + -- as 'AlicuotaIva',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  Cast(  f.IvaBasico as decimal(13,2)) ))  as texto --  as 'FechaVencimiento'
, F.NroFactura as  NroFactura

/*,					      
tipocomp AS Tipo_Comprobante, F.Tipo AS Tipo,   
F.NetoFactura AS Neto_Gravado, 0 AS Exento, F.IvaBasico AS IVA, F.IvaAdicional AS IVA2, F.Gastos1 + F.Gastos2 + F.Gastos3 AS Otras_Percepciones, 
C.HiperCliente, C.CatIva, I.Descripcion, F.impuestoGr1 AS impuestoInterno, F.impuestoGr2 AS itc, F.impuestoGr3 AS tasaFondo, 
F.impuestoGr4 AS tasavialcba,    F.NetoFactura AS nogravado,  'CUIT' as 'descripcionDocumentoComprador'
*/

FROM         
mFacturasV F INNER JOIN
MClientes C ON F.Cliente = C.Codigo INNER JOIN
MCatIva I ON C.CatIva = I.Codigo

WHERE     
(F.FhBaja IS NULL) 
AND tipocomp IN ('NC', 'ND') /*and codImpFiscal <> 'E'*/ 
AND F.catIva <> 12
and	(F.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 
--AND tipo= 'A'
UNION ALL

SELECT				

CASE tipocomp
WHEN 'FC' THEN CASE F.Tipo WHEN 'A' THEN '001' WHEN 'B' THEN '006' END
WHEN 'ND' THEN CASE F.Tipo WHEN 'A' THEN '002' WHEN 'B' THEN '007' END
WHEN 'NC' THEN CASE F.Tipo WHEN 'A' THEN '003' WHEN 'B' THEN '008' END			
END + --as 'TipoComprobante',
dbo.rellenarConCeros(5, CONVERT(VARCHAR(5), f.nroSucursal)) + --as 'PuntoVenta'  ,					  
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobante,
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( F.NetoFactura  as decimal(13,2)))) + -- AS 'ImporteNetoGravado',
CASE f.IvaBasico
WHEN 0 THEN  '0003'
ELSE '0005'	
END + -- as 'AlicuotaIva',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  Cast(  f.IvaBasico as decimal(13,2)) ))  as texto --  as 'FechaVencimiento'
, F.NroFactura as  NroFactura

/*,                     	    			  
tipocomp AS Tipo_Comprobante, F.Tipo AS Tipo,  
0 AS Neto_Gravado, 1 AS Exento, F.IvaBasico AS IVA, F.IvaAdicional AS IVA2, F.Gastos1 + F.Gastos2 + F.Gastos3 AS Otras_Percepciones, 
C.HiperCliente, C.CatIva, I.Descripcion, F.impuestoGr1 AS impuestoInterno, F.impuestoGr2 AS itc, F.impuestoGr3 AS tasaFondo, 
F.impuestoGr4 AS tasavialcba,    F.NetoFactura AS nogravado,  'CUIT' as 'descripcionDocumentoComprador'
*/

FROM         
mFacturasV F INNER JOIN
MClientes C ON F.Cliente = C.Codigo INNER JOIN
MCatIva I ON C.CatIva = I.Codigo

WHERE     
(F.FhBaja IS NULL) 
AND tipocomp IN ('NC', 'ND') /* and codImpFiscal = 'E'*/ 
AND F.catIva = 12
and	(F.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 
--AND tipo= 'A'
) as alicuota

order by alicuota.NroFactura asc

			
		
		]]>		
    	</sql-query>   
    	
    	
    	
    	
    	<sql-query name="findVentas">
		<query-param name="fechaDesde" type="timestamp"/>
	    <query-param name="fechaHasta" type="timestamp"/>  
	    	    
		
		<![CDATA[ 	
				
				SELECT venta.texto,1 from (
	
SELECT 

CONVERT(VARCHAR(8), F.Fecha, 112)  + --AS Fecha, 	
CASE tipocomp
WHEN 'FC' THEN CASE F.Tipo WHEN 'A' THEN '001' WHEN 'B' THEN '006' END
WHEN 'ND' THEN CASE F.Tipo WHEN 'A' THEN '002' WHEN 'B' THEN '007' END
WHEN 'NC' THEN CASE F.Tipo WHEN 'A' THEN '003' WHEN 'B' THEN '008' END			
END + --as 'TipoComprobante',
dbo.rellenarConCeros(5, CONVERT(VARCHAR(5), f.nroSucursal)) + --as 'PuntoVenta'  ,					  
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobante,
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobanteHasta,
'80'  + -- as 'idDocumentoComprador',
dbo.rellenarConCeros(20, CONVERT(VARCHAR, 
 CASE ltrim(rtrim(C.CUIT))
 WHEN '30658233692' THEN '27000000014'
 ELSE C.CUIT
 END
)) + -- AS CUIT, 
dbo.rellenarConBlancos(30, CONVERT(VARCHAR, C.Descripcion )) + -- AS Desc_Cliente,
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( F.NetoFactura + F.IvaBasico + F.IvaAdicional 
+ F.impuestoGr1 + F.impuestoGr2 + F.impuestoGr3 + F.impuestoGr4 - 
F.Gastos1 + F.Gastos2 + F.Gastos3 + f.piva + f.iibb as decimal(13,2)))) + -- AS 'TotalComprobante',
dbo.rellenarConCeros(15, 0) + -- AS 'ConceptosNoGRavados',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  0 )) + -- AS 'PercepNoCategorizados',
dbo.rellenarConCeros(15, 0 )  + -- as 'ImpOperacionesExentas',					 			
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  Cast(  f.piva as decimal(13,2)) )) + -- AS 'ImpPercOPagoImpNac',
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast(  f.iibb as decimal(13,2)) )) + -- AS 'ImpPercIngresosBrutos',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,   0 )) + --  AS 'ImpPercepImpMunic',
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( impuestoGr1 as decimal(13,2)) )) + -- as 'ImpuestoInterno',
'PES' + -- as 'CodMoneda',
dbo.rellenarConCeros(10, CONVERT(VARCHAR, '1000000'  )) + -- as 'tipoCambio',   
'1' + --  as 'CantAlícuotasIVA' , 
CASE F.IvaBasico
 WHEN 0 THEN 'A'
 ELSE '0'
END + -- as 'codOPeracion'
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( (F.impuestoGr2 + F.impuestoGr3) as decimal(13,2))   )) + --  as 'OtrosTributos',

CONVERT(VARCHAR(8), F.Fevto, 112) as texto --  as 'FechaVencimiento'
, F.NroFactura as  NroFactura	

/*,					       					 
tipocomp AS Tipo_Comprobante, F.Tipo AS Tipo, 
F.NetoFactura AS Neto_Gravado, 0 AS Exento, F.IvaBasico AS IVA, F.IvaAdicional AS IVA2, F.Gastos1 + F.Gastos2 + F.Gastos3 AS Otras_Percepciones, 
C.HiperCliente, C.CatIva, I.Descripcion, F.impuestoGr1 AS impuestoInterno, F.impuestoGr2 AS itc, F.impuestoGr3 AS tasaFondo, 
F.impuestoGr4 AS tasavialcba,   0 AS nogravado, 'CUIT' as 'descripcionDocumentoComprador'
*/

FROM         
mFacturasV F INNER JOIN
MClientes C ON F.Cliente = C.Codigo INNER JOIN
MCatIva I ON C.CatIva = I.Codigo

WHERE     
(F.FhBaja IS NULL) 
AND tipocomp = 'FC'
and	(F.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 

--AND tipo= 'A'

UNION 

SELECT				
CONVERT(VARCHAR(8), F.Fecha, 112)  + --AS Fecha, 	
CASE tipocomp
WHEN 'FC' THEN CASE F.Tipo WHEN 'A' THEN '001' WHEN 'B' THEN '006' END
WHEN 'ND' THEN CASE F.Tipo WHEN 'A' THEN '002' WHEN 'B' THEN '007' END
WHEN 'NC' THEN CASE F.Tipo WHEN 'A' THEN '003' WHEN 'B' THEN '008' END			
END + --as 'TipoComprobante',
dbo.rellenarConCeros(5, CONVERT(VARCHAR(5), f.nroSucursal)) + --as 'PuntoVenta'  ,					  
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobante,
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobanteHasta,
'80'  + -- as 'idDocumentoComprador',
dbo.rellenarConCeros(20, CONVERT(VARCHAR,
CASE ltrim(rtrim(C.CUIT))
 WHEN '30658233692' THEN '27000000014'
 ELSE C.CUIT
 END
 )) + -- AS CUIT, 
dbo.rellenarConBlancos(30, CONVERT(VARCHAR, C.Descripcion )) + -- AS Desc_Cliente,
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( F.NetoFactura + F.IvaBasico + F.IvaAdicional 
+ F.impuestoGr1 + F.impuestoGr2 + F.impuestoGr3 + F.impuestoGr4 - 
F.Gastos1 + F.Gastos2 + F.Gastos3 + f.piva + f.iibb as decimal(13,2)))) + -- AS 'TotalComprobante',
dbo.rellenarConCeros(15, 0) + -- AS 'ConceptosNoGRavados',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  0 )) + -- AS 'PercepNoCategorizados',
dbo.rellenarConCeros(15, 0)  + -- as 'ImpOperacionesExentas',					 			
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  Cast(  f.piva as decimal(13,2)) )) + -- AS 'ImpPercOPagoImpNac',
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast(  f.iibb as decimal(13,2)) )) + -- AS 'ImpPercIngresosBrutos',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,   0 )) + --  AS 'ImpPercepImpMunic',
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( impuestoGr1 as decimal(13,2)) )) + -- as 'ImpuestoInterno',
'PES' + -- as 'CodMoneda',
dbo.rellenarConCeros(10, CONVERT(VARCHAR, '1000000'   )) + -- as 'tipoCambio',   
'1' + --  as 'CantAlícuotasIVA' ,
CASE F.IvaBasico
 WHEN 0 THEN 'A'
 ELSE '0'
END + -- as 'codOPeracion'
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( (F.impuestoGr2 + F.impuestoGr3) as decimal(13,2))   )) + --  as 'OtrosTributos',

CONVERT(VARCHAR(8), F.Fevto, 112)  as texto --  as 'FechaVencimiento'	
, F.NroFactura as  NroFactura

/*,					      
tipocomp AS Tipo_Comprobante, F.Tipo AS Tipo,   
F.NetoFactura AS Neto_Gravado, 0 AS Exento, F.IvaBasico AS IVA, F.IvaAdicional AS IVA2, F.Gastos1 + F.Gastos2 + F.Gastos3 AS Otras_Percepciones, 
C.HiperCliente, C.CatIva, I.Descripcion, F.impuestoGr1 AS impuestoInterno, F.impuestoGr2 AS itc, F.impuestoGr3 AS tasaFondo, 
F.impuestoGr4 AS tasavialcba,    F.NetoFactura AS nogravado,  'CUIT' as 'descripcionDocumentoComprador'
*/

FROM         
mFacturasV F INNER JOIN
MClientes C ON F.Cliente = C.Codigo INNER JOIN
MCatIva I ON C.CatIva = I.Codigo

WHERE     
(F.FhBaja IS NULL) 
AND tipocomp IN ('NC', 'ND') /*and codImpFiscal <> 'E'*/ 
AND F.catIva <> 12
and	(F.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 

--AND tipo= 'A'

UNION ALL

SELECT				

CONVERT(VARCHAR(8), F.Fecha, 112)  + --AS Fecha, 	
CASE tipocomp
WHEN 'FC' THEN CASE F.Tipo WHEN 'A' THEN '001' WHEN 'B' THEN '006' END
WHEN 'ND' THEN CASE F.Tipo WHEN 'A' THEN '002' WHEN 'B' THEN '007' END
WHEN 'NC' THEN CASE F.Tipo WHEN 'A' THEN '003' WHEN 'B' THEN '008' END			
END + --as 'TipoComprobante',
dbo.rellenarConCeros(5, CONVERT(VARCHAR(5), f.nroSucursal)) + --as 'PuntoVenta'  ,					  
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobante,
dbo.rellenarConCeros(20, CONVERT(VARCHAR, F.NroFactura)) + -- AS NroComprobanteHasta,
'80'  + -- as 'idDocumentoComprador',
dbo.rellenarConCeros(20, CONVERT(VARCHAR, 
CASE ltrim(rtrim(C.CUIT))
 WHEN '30658233692' THEN '27000000014'
 ELSE C.CUIT
 END
)) + -- AS CUIT, 
dbo.rellenarConBlancos(30, CONVERT(VARCHAR, C.Descripcion )) + -- AS Desc_Cliente,
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( F.NetoFactura + F.IvaBasico + F.IvaAdicional 
+ F.impuestoGr1 + F.impuestoGr2 + F.impuestoGr3 + F.impuestoGr4 - 
F.Gastos1 + F.Gastos2 + F.Gastos3 + f.piva + f.iibb as decimal(13,2)))) + -- AS 'TotalComprobante',
dbo.rellenarConCeros(15, 0 ) + -- AS 'ConceptosNoGRavados',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  0 )) + -- AS 'PercepNoCategorizados',
dbo.rellenarConCeros(15, 0)  + -- as 'ImpOperacionesExentas',					 			
dbo.rellenarConCeros(15, CONVERT(VARCHAR,  Cast(  f.piva as decimal(13,2)) )) + -- AS 'ImpPercOPagoImpNac',
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast(  f.iibb as decimal(13,2)) )) + -- AS 'ImpPercIngresosBrutos',
dbo.rellenarConCeros(15, CONVERT(VARCHAR,   0 )) + --  AS 'ImpPercepImpMunic',
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( impuestoGr1 as decimal(13,2)) )) + -- as 'ImpuestoInterno',
'PES' + -- as 'CodMoneda',
dbo.rellenarConCeros(10, CONVERT(VARCHAR, '1000000'   )) + -- as 'tipoCambio',   
'1' + --  as 'CantAlícuotasIVA' ,
CASE F.IvaBasico
 WHEN 0 THEN 'A'
 ELSE '0'
END + -- as 'codOPeracion'
dbo.rellenarConCeros(15, CONVERT(VARCHAR, Cast( (F.impuestoGr2 + F.impuestoGr3) as decimal(13,2))   )) + --  as 'OtrosTributos',

CONVERT(VARCHAR(8), F.Fevto, 112)  as texto  --  as 'FechaVencimiento'	
, F.NroFactura as  NroFactura

/*,                     	    			  
tipocomp AS Tipo_Comprobante, F.Tipo AS Tipo,  
0 AS Neto_Gravado, 1 AS Exento, F.IvaBasico AS IVA, F.IvaAdicional AS IVA2, F.Gastos1 + F.Gastos2 + F.Gastos3 AS Otras_Percepciones, 
C.HiperCliente, C.CatIva, I.Descripcion, F.impuestoGr1 AS impuestoInterno, F.impuestoGr2 AS itc, F.impuestoGr3 AS tasaFondo, 
F.impuestoGr4 AS tasavialcba,    F.NetoFactura AS nogravado,  'CUIT' as 'descripcionDocumentoComprador'
*/

FROM         
mFacturasV F INNER JOIN
MClientes C ON F.Cliente = C.Codigo INNER JOIN
MCatIva I ON C.CatIva = I.Codigo

WHERE     
(F.FhBaja IS NULL) 
AND tipocomp IN ('NC', 'ND') /* and codImpFiscal = 'E'*/ 
AND F.catIva = 12
and	(F.fecha between  :fechaDesde and dateadd(dd,1,:fechaHasta) or :fechaDesde is null and dateadd(dd,1,:fechaHasta)is null ) 

--AND tipo= 'A'
) as venta

order by venta.NroFactura asc

			
		
		]]>		
    	</sql-query>   
    	
</hibernate-mapping>
