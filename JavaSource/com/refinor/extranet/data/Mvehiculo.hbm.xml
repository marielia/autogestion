<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 19-feb-2008 16:20:42 by Hibernate Tools 3.2.0.beta7 -->
<hibernate-mapping>
    <class name="com.refinor.extranet.data.Mvehiculo" table="mVehiculo" schema="dbo" >
    <!-- SI no se puede guardar un vehiculo nuevo es porque en la tabla de mvehiculo tiene identidad=si en el diseÃ±o y deberia tener NO -->
        <id name="codigo" type="int">
            <column name="codigo" />
            <generator class="assigned" />
        </id>
        <property name="codCliente" type="java.lang.Integer">
            <column name="codCliente" />
        </property>
        <property name="dominio" type="string">
            <column name="dominio" length="50" />
        </property>
        <property name="codBarra" type="string">
            <column name="codBarra" length="10" />
        </property>
        <property name="inicializado" type="java.lang.Boolean">
            <column name="inicializado" />
        </property>
        <property name="codUnidadN" type="java.lang.Integer">
            <column name="codUnidadN" />
        </property>
        <property name="activo" type="java.lang.Boolean">
            <column name="activo" />
        </property>
        <property name="idUserLock" type="java.lang.Boolean">
            <column name="IdUserLock" />
        </property>
       <property name="FAlta" type="timestamp">
            <column name="f_alta" length="16" />
        </property>
         <property name="FBaja" type="timestamp">
            <column name="f_baja" length="16" />
        </property>
        
    </class>
    <sql-query name="findVehiculoByClienteUnidadNegocioPatenteEstado">
    	<query-param name="codCliente" type="string"/>
		<query-param name="descripcionUnidadNegocio" type="string"/>
		<query-param name="patente" type="string"/>
		<query-param name="vehiculoActivo" type="boolean"/>	
		<query-param name="vehiculoBaja" type="boolean"/>	
		<query-param name="vehiculoInicializado" type="boolean"/>	
		<query-param name="vehiculoNoInicializado" type="boolean"/>	
		<query-param name="codUnidadNegocio" type="integer"/>
		<query-param name="codGrupoUN" type="integer"/>	
		
  		select 
  		b.codigo as codigo,   		 
  		b.dominio as dominio, 
  		isnull(b.codBarra,' ') as codBarra,
  		a.codigo as codUnidadNegocio,
  		a.descripcion as descrUnidadNegocio,
  		c.codigo as codGrupoUN,
		c.descripcion as descrGrupoUN,
		d.codigo as codCliente,
		d.cod_cliente_alfa as codClienteAlfa,
		b.activo,
		b.inicializado,	
		d.descripcion as apecli,
		b.f_alta ,
		b.f_baja
		
		
		from   MUnidadN as a, 
				Mvehiculo as b, 
				MgrupoUn as c, 
				Mclientes d
		where 
		a.codigo = b.codUnidadN and
		c.codCliente= d.codigo and
		c.codigo = a.codGrupoUN and
		d.cod_cliente_alfa like :codCliente and
		(b.dominio like :patente) and
		(a.descripcion like :descripcionUnidadNegocio) and	
		(a.codigo = :codUnidadNegocio or :codUnidadNegocio = -1) and
		(c.codigo = :codGrupoUN or :codGrupoUN = -1) and	
		 (b.activo = :vehiculoActivo or b.activo = :vehiculoBaja) and
		 (b.inicializado = :vehiculoInicializado or b.inicializado = :vehiculoNoInicializado)
		 order by b.dominio
    </sql-query>
    
    <query name="findVehiculoByCliente">	
		from Mvehiculo where codCliente = :codClienteInt
		and inicializado= :choferInicializado 
		and	activo= :choferActivo
		and dominio like :dominio
		order by dominio
	</query>
	
	 <sql-query name="findCodVehiculo">
    <![CDATA[
		select max(codigo) from Mvehiculo		
	]]></sql-query>
	
	<query name="findVehiculoPorDominioCliente">	
		FROM Mvehiculo 
		WHERE 
		codCliente = :codCliente 
		AND	LTRIM(RTRIM(UPPER(dominio))) like LTRIM(RTRIM(UPPER(:patente))) 
		AND	(activo=:ACTIVO or activo=:ANULADO)
	</query>
	
	<query name="findVehiculoPorCodigo">	
		from Mchofer where codigo = :codVehiculo
	</query>
    
</hibernate-mapping>
